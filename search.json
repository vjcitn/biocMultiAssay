[{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"Loading packages:","code":"if (!require(\"BiocManager\"))     install.packages(\"BiocManager\") BiocManager::install(\"MultiAssayExperiment\") library(MultiAssayExperiment) library(GenomicRanges) library(SummarizedExperiment) library(RaggedExperiment)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"citing-multiassayexperiment","dir":"Articles","previous_headings":"","what":"Citing MultiAssayExperiment","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"Without citations free open-source software possible. Please cite MultiAssayExperiment shown References section (Ramos et al. (2017)). may also refer Cancer Research publication AACR Journals link .","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"a-brief-description","dir":"Articles","previous_headings":"","what":"A Brief Description","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"MultiAssayExperiment offers data structure representing analyzing multi-omics experiments: biological analysis approach utilizing multiple types observations, DNA mutations abundance RNA proteins, biological specimens.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"choosing-the-appropriate-data-structure","dir":"Articles","previous_headings":"A Brief Description","what":"Choosing the appropriate data structure","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"assays different numbers rows even columns, MultiAssayExperiment recommended. sets assays information across rows (e.g., genes genomic ranges), SummarizedExperiment recommended data structure.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"overview-of-the-multiassayexperiment-class","dir":"Articles","previous_headings":"","what":"Overview of the MultiAssayExperiment class","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"overview class constructors extractors: visual representation MultiAssayExperiment class accessor functions can seen . three main components: ExperimentList colData sampleMap MultiAssayExperiment object schematic shows design infrastructure class. colData provides data patients, cell lines, biological units, one row per unit one column per variable. experiments list assay datasets arbitrary class, one column per observation. sampleMap links single table patient data (colData) list experiments via simple powerful table experiment:patient edges (relationships), can created automatically simple cases spreadsheet assay-specific sample identifiers used. sampleMap relates column (observation) assays (experiments) exactly one row (biological unit) colData; however, one row colData may map zero, one, columns per assay, allowing missing replicate assays. Green stripes indicate mapping one subject multiple observations across experiments.","code":"empty <- MultiAssayExperiment() empty ## A MultiAssayExperiment object of 0 listed ##  experiments with no user-defined names and respective classes. ##  Containing an ExperimentList class object of length 0: ##  Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files slotNames(empty) ## [1] \"ExperimentList\" \"colData\"        \"sampleMap\"      \"drops\"          ## [5] \"metadata\""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"experimentlist-experimental-data","dir":"Articles","previous_headings":"Overview of the MultiAssayExperiment class > Components of the MultiAssayExperiment","what":"ExperimentList: experimental data","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"ExperimentList slot class container workhorse MultiAssayExperiment class. contains experimental data. inherits class S4Vectors::SimpleList one element/component per data type. elements ExperimentList can contain ID-based range-based data. Requirements classes ExperimentList listed API. following base Bioconductor classes known work elements ExperimentList: base::matrix: base class, can used ID-based datasets gene expression summarized per-gene, microRNA, metabolomics, microbiome data. SummarizedExperiment::SummarizedExperiment: richer representation compared ordinary matrix ID-based datasets capable storing additional assay- level metadata. Biobase::ExpressionSet: legacy representation ID-based datasets, supported convenience supplanted SummarizedExperiment. SummarizedExperiment::RangedSummarizedExperiment: rectangular range-based datasets, one set genomic ranges assayed multiple samples. can used gene expression, methylation, data types refer genomic positions. RaggedExperiment::RaggedExperiment: range-based datasets, copy number mutation data, RaggedExperiment class can used represent measurements genomic positions.","code":"class(experiments(empty)) # ExperimentList ## [1] \"ExperimentList\" ## attr(,\"package\") ## [1] \"MultiAssayExperiment\""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"class-requirements-within-experimentlist-container","dir":"Articles","previous_headings":"Overview of the MultiAssayExperiment class > Components of the MultiAssayExperiment > ExperimentList: experimental data","what":"Class requirements within ExperimentList container","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"See API section details requirements using data classes. general, data classes meeting minimum requirements, including support square bracket [ subsetting dimnames() work default. datasets contained elements ExperimentList can : column names (required) row names (optional) column names correspond samples, used match assay data specimen metadata stored colData. row names can correspond variety features data including limited gene names, probe IDs, proteins, named ranges. Note existence “row” names mean data must rectangular matrix-like. Classes contained ExperimentList must support following list methods: [: single square bracket subsetting, single comma. assumed values comma subset rows, values comma subset columns. dimnames() : corresponding features (genes, proteins, etc.) experimental samples dim(): returns vector number rows number columns","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"coldata-primary-data","dir":"Articles","previous_headings":"Overview of the MultiAssayExperiment class > Components of the MultiAssayExperiment","what":"colData: primary data","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"MultiAssayExperiment keeps one set “primary” metadata describes ‘biological unit’ can refer specimens, experimental subjects, patients, etc. vignette, refer experimental subject patient.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"coldata-slot-requirements","dir":"Articles","previous_headings":"Overview of the MultiAssayExperiment class > Components of the MultiAssayExperiment > colData: primary data","what":"colData slot requirements","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"colData dataset class DataFrame can accept data.frame class object coerced. order relate metadata biological unit, row names colData dataset must contain patient identifiers. Key points: one row colData can map zero, one, columns ExperimentList element row colData must map least one column least one ExperimentList element. column ExperimentList element must map exactly one row colData. relationships defined sampleMap.","code":"patient.data <- data.frame(sex=c(\"M\", \"F\", \"M\", \"F\"),     age=38:41,     row.names=c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\")) patient.data ##         sex age ## Jack      M  38 ## Jill      F  39 ## Bob       M  40 ## Barbara   F  41"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"note-on-the-flexibility-of-the-dataframe","dir":"Articles","previous_headings":"Overview of the MultiAssayExperiment class > Components of the MultiAssayExperiment > colData: primary data","what":"Note on the flexibility of the DataFrame","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"many typical purposes DataFrame data.frame behave equivalently; Dataframe flexible allows vector-like data type stored columns. flexibility DataFrame permits, example, storing multiple dose-response values single cell line, even number doses responses consistent across cell lines. Doses stored one column colData SimpleList, responses another column, also SimpleList. , dose-response values stored single column colData two-column matrix cell line.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"sampleMap","dir":"Articles","previous_headings":"Overview of the MultiAssayExperiment class > Components of the MultiAssayExperiment","what":"sampleMap: relating colData to multiple assays","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"sampleMap DataFrame relates “primary” data (colData) experimental assays: sampleMap provides unambiguous map every experimental observation one one row colData. , however, permissible row colData associated multiple experimental observations observations . words, “many--one” mapping experimental observations rows colData, “one---number” mapping rows colData experimental observations.","code":"is(sampleMap(empty), \"DataFrame\") # TRUE ## [1] TRUE"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"samplemap-structure","dir":"Articles","previous_headings":"Overview of the MultiAssayExperiment class > Components of the MultiAssayExperiment > sampleMap: relating colData to multiple assays","what":"sampleMap structure","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"sampleMap three columns, following column names: assay provides names different experiments / assays performed. user-defined, requirement names ExperimentList, experimental assays stored, must contained column. primary provides “primary” sample names. values column must also present rownames colData(MultiAssayExperiment). example, allowable values column “Jack”, “Jill”, “Barbara”, “Bob”. colname provides sample names used experimental datasets, practice often different primary sample names. assay, column names must found column. Otherwise, assays orphaned: impossible match samples overall experiment. mentioned , duplicate values allowed, represent replicates overall experiment-level annotation. design motivated following situations: allows flexibility amount technical replication biological replication (tumor matched normal single patient) individual assays. allows missing observations (RNA-seq performed patients). allows use different identifiers used patients / specimens assay. different identifiers matched unambiguously, consistency maintained subsetting re-ordering.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"instances-where-samplemap-isnt-provided","dir":"Articles","previous_headings":"","what":"MultiAssayExperiment: The Integrative Bioconductor Container","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"assay uses colnames (.e., sample identifiers used experiment), simple list datasets sufficient MultiAssayExperiment constructor function. necessary rownames colnames: example, user provide colData argument constructor function filled empty DataFrame: colData can provided. , note assay sample (column) mapped corresponding row provided colData gets dropped. part ensuring internal validity MultiAssayExperiment.","code":"exprss1 <- matrix(rnorm(16), ncol = 4,         dimnames = list(sprintf(\"ENST00000%i\", sample(288754:290000, 4)),                 c(\"Jack\", \"Jill\", \"Bob\", \"Bobby\"))) exprss2 <- matrix(rnorm(12), ncol = 3,         dimnames = list(sprintf(\"ENST00000%i\", sample(288754:290000, 4)),                 c(\"Jack\", \"Jane\", \"Bob\"))) doubleExp <- list(\"methyl 2k\"  = exprss1, \"methyl 3k\" = exprss2) simpleMultiAssay <- MultiAssayExperiment(experiments=doubleExp) simpleMultiAssay ## A MultiAssayExperiment object of 2 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 2: ##  [1] methyl 2k: matrix with 4 rows and 4 columns ##  [2] methyl 3k: matrix with 4 rows and 3 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files colData(simpleMultiAssay) ## DataFrame with 5 rows and 0 columns simpleMultiAssay2 <- MultiAssayExperiment(experiments=doubleExp,                                           colData=patient.data) ## Warning: Data dropped from ExperimentList (element - column): ##  methyl 2k - Bobby ##  methyl 3k - Jane ## Unable to map to rows of colData ## harmonizing input: ##   removing 1 colData rownames not in sampleMap 'primary' simpleMultiAssay2 ## A MultiAssayExperiment object of 2 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 2: ##  [1] methyl 2k: matrix with 4 rows and 3 columns ##  [2] methyl 3k: matrix with 4 rows and 2 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files colData(simpleMultiAssay2) ## DataFrame with 3 rows and 2 columns ##              sex       age ##      <character> <integer> ## Jack           M        38 ## Jill           F        39 ## Bob            M        40"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"metadata","dir":"Articles","previous_headings":"Overview of the MultiAssayExperiment class > Components of the MultiAssayExperiment","what":"metadata","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"Metadata can added different levels MultiAssayExperiment. Can class, storing study-wide metadata, citation information. empty MultiAssayExperiment object, NULL. ExperimentList level, metadata function allow user enter metadata list. individual assay level, certain classes may support metadata, example, metadata mcols SummarizedExperiment. recommended use metadata ExperimentList level. back top","code":"class(metadata(empty)) # NULL (class \"ANY\") ## [1] \"list\" metadata(experiments(empty)) ## list()"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"creating-a-multiassayexperiment-object-a-rich-example","dir":"Articles","previous_headings":"","what":"Creating a MultiAssayExperiment object: a rich example","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"section demonstrate core supported data classes, using different sample ID conventions assay, primary colData. supported classes , matrix, SummarizedExperiment, RangedSummarizedExperiment.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"create-toy-datasets-demonstrating-all-supported-data-types","dir":"Articles","previous_headings":"Creating a MultiAssayExperiment object: a rich example","what":"Create toy datasets demonstrating all supported data types","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"three matrix-like datasets. First, let’s represent expression data SummarizedExperiment: following map matches colData sample names exprdata sample names. Note row orders aren’t initially matched , OK. Now methylation data, represent matrix. uses gene identifiers also, measures partially overlapping set genes. Now, let’s store simple matrix can contains replicate one patients. following map matches colData sample names methyldat sample names. Now microRNA platform, common identifiers datasets, also represent matrix. also missing data “Jill”. use sample naming convention arrays. following map matches colData sample names microdat sample names. Finally, create dataset class RangedSummarizedExperiment: map colData samples RangedSummarizedExperiment:","code":"(arraydat <- matrix(seq(101, 108), ncol=4,     dimnames=list(c(\"ENST00000294241\", \"ENST00000355076\"),     c(\"array1\", \"array2\", \"array3\", \"array4\")))) ##                 array1 array2 array3 array4 ## ENST00000294241    101    103    105    107 ## ENST00000355076    102    104    106    108 coldat <- data.frame(slope53=rnorm(4),     row.names=c(\"array1\", \"array2\", \"array3\", \"array4\"))  exprdat <- SummarizedExperiment(arraydat, colData=coldat) exprdat ## class: SummarizedExperiment  ## dim: 2 4  ## metadata(0): ## assays(1): '' ## rownames(2): ENST00000294241 ENST00000355076 ## rowData names(0): ## colnames(4): array1 array2 array3 array4 ## colData names(1): slope53 (exprmap <- data.frame(primary=rownames(patient.data)[c(1, 2, 4, 3)],                        colname=c(\"array1\", \"array2\", \"array3\", \"array4\"),                        stringsAsFactors = FALSE)) ##   primary colname ## 1    Jack  array1 ## 2    Jill  array2 ## 3 Barbara  array3 ## 4     Bob  array4 (methyldat <-    matrix(1:10, ncol=5,           dimnames=list(c(\"ENST00000355076\", \"ENST00000383706\"),                         c(\"methyl1\", \"methyl2\", \"methyl3\",                           \"methyl4\", \"methyl5\")))) ##                 methyl1 methyl2 methyl3 methyl4 methyl5 ## ENST00000355076       1       3       5       7       9 ## ENST00000383706       2       4       6       8      10 (methylmap <- data.frame(primary = c(\"Jack\", \"Jack\", \"Jill\", \"Barbara\", \"Bob\"),     colname = c(\"methyl1\", \"methyl2\", \"methyl3\", \"methyl4\", \"methyl5\"),     stringsAsFactors = FALSE)) ##   primary colname ## 1    Jack methyl1 ## 2    Jack methyl2 ## 3    Jill methyl3 ## 4 Barbara methyl4 ## 5     Bob methyl5 (microdat <- matrix(201:212, ncol=3,                     dimnames=list(c(\"hsa-miR-21\", \"hsa-miR-191\",                                     \"hsa-miR-148a\", \"hsa-miR148b\"),                                   c(\"micro1\", \"micro2\", \"micro3\")))) ##              micro1 micro2 micro3 ## hsa-miR-21      201    205    209 ## hsa-miR-191     202    206    210 ## hsa-miR-148a    203    207    211 ## hsa-miR148b     204    208    212 (micromap <- data.frame(primary = c(\"Jack\", \"Barbara\", \"Bob\"),     colname = c(\"micro1\", \"micro2\", \"micro3\"), stringsAsFactors = FALSE)) ##   primary colname ## 1    Jack  micro1 ## 2 Barbara  micro2 ## 3     Bob  micro3 nrows <- 5; ncols <- 4 counts <- matrix(runif(nrows * ncols, 1, 1e4), nrows) rowRanges <- GRanges(rep(c(\"chr1\", \"chr2\"), c(2, nrows - 2)),     IRanges(floor(runif(nrows, 1e5, 1e6)), width=100),     strand=sample(c(\"+\", \"-\"), nrows, TRUE),     feature_id=sprintf(\"ID\\\\%03d\", 1:nrows)) names(rowRanges) <- letters[1:5] colData <- DataFrame(Treatment=rep(c(\"ChIP\", \"Input\"), 2),     row.names= c(\"mysnparray1\", \"mysnparray2\", \"mysnparray3\", \"mysnparray4\")) rse <- SummarizedExperiment(assays=SimpleList(counts=counts),     rowRanges=rowRanges, colData=colData) (rangemap <-     data.frame(primary = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\"),     colname = c(\"mysnparray1\", \"mysnparray2\", \"mysnparray3\", \"mysnparray4\"),         stringsAsFactors = FALSE)) ##   primary     colname ## 1    Jack mysnparray1 ## 2    Jill mysnparray2 ## 3     Bob mysnparray3 ## 4 Barbara mysnparray4"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"samplemap-creation","dir":"Articles","previous_headings":"Creating a MultiAssayExperiment object: a rich example","what":"sampleMap creation","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"MultiAssayExperiment constructor function can create sampleMap automatically single naming convention used, example used platform-specific sample identifiers (e.g. mysnparray1, etc). must provide ID map matches samples experiment back colData, three-column data.frame DataFrame three columns named “assay”, primary”, “colname”. start list: use convenience function listToMap convert list data.frame objects valid object sampleMap: Note, dfmap can reverted list another provided function:","code":"listmap <- list(exprmap, methylmap, micromap, rangemap) names(listmap) <- c(\"Affy\", \"Methyl 450k\", \"Mirna\", \"CNV gistic\") listmap ## $Affy ##   primary colname ## 1    Jack  array1 ## 2    Jill  array2 ## 3 Barbara  array3 ## 4     Bob  array4 ##  ## $`Methyl 450k` ##   primary colname ## 1    Jack methyl1 ## 2    Jack methyl2 ## 3    Jill methyl3 ## 4 Barbara methyl4 ## 5     Bob methyl5 ##  ## $Mirna ##   primary colname ## 1    Jack  micro1 ## 2 Barbara  micro2 ## 3     Bob  micro3 ##  ## $`CNV gistic` ##   primary     colname ## 1    Jack mysnparray1 ## 2    Jill mysnparray2 ## 3     Bob mysnparray3 ## 4 Barbara mysnparray4 dfmap <- listToMap(listmap) dfmap ## DataFrame with 16 rows and 3 columns ##           assay     primary     colname ##        <factor> <character> <character> ## 1   Affy               Jack      array1 ## 2   Affy               Jill      array2 ## 3   Affy            Barbara      array3 ## 4   Affy                Bob      array4 ## 5   Methyl 450k        Jack     methyl1 ## ...         ...         ...         ... ## 12   Mirna              Bob      micro3 ## 13   CNV gistic        Jack mysnparray1 ## 14   CNV gistic        Jill mysnparray2 ## 15   CNV gistic         Bob mysnparray3 ## 16   CNV gistic     Barbara mysnparray4 mapToList(dfmap, \"assay\")"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"experimental-data-as-a-list","dir":"Articles","previous_headings":"Creating a MultiAssayExperiment object: a rich example","what":"Experimental data as a list()","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"Create named list experiments MultiAssayExperiment function. names must found within third column dfmap:","code":"objlist <- list(\"Affy\" = exprdat, \"Methyl 450k\" = methyldat,     \"Mirna\" = microdat, \"CNV gistic\" = rse)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"creation-of-the-multiassayexperiment-class-object","dir":"Articles","previous_headings":"Creating a MultiAssayExperiment object: a rich example","what":"Creation of the MultiAssayExperiment class object","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"recommend using MultiAssayExperiment constructor function: following extractor functions can used get extract data object: Note ExperimentList class extends SimpleList class add validity checks specific MultiAssayExperiment. can used like list.","code":"myMultiAssay <- MultiAssayExperiment(objlist, patient.data, dfmap) myMultiAssay ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 4 columns ##  [2] Methyl 450k: matrix with 2 rows and 5 columns ##  [3] Mirna: matrix with 4 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files experiments(myMultiAssay) ## ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 4 columns ##  [2] Methyl 450k: matrix with 2 rows and 5 columns ##  [3] Mirna: matrix with 4 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns colData(myMultiAssay) ## DataFrame with 4 rows and 2 columns ##                 sex       age ##         <character> <integer> ## Jack              M        38 ## Jill              F        39 ## Bob               M        40 ## Barbara           F        41 sampleMap(myMultiAssay) ## DataFrame with 16 rows and 3 columns ##           assay     primary     colname ##        <factor> <character> <character> ## 1   Affy               Jack      array1 ## 2   Affy               Jill      array2 ## 3   Affy            Barbara      array3 ## 4   Affy                Bob      array4 ## 5   Methyl 450k        Jack     methyl1 ## ...         ...         ...         ... ## 12   Mirna              Bob      micro3 ## 13   CNV gistic        Jack mysnparray1 ## 14   CNV gistic        Jill mysnparray2 ## 15   CNV gistic         Bob mysnparray3 ## 16   CNV gistic     Barbara mysnparray4 metadata(myMultiAssay) ## list()"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"helper-function-to-create-a-multiassayexperiment-object","dir":"Articles","previous_headings":"Creating a MultiAssayExperiment object: a rich example","what":"Helper function to create a MultiAssayExperiment object","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"prepMultiAssay function helps diagnose common problems creating MultiAssayExperiment object. provides error messages /warnings instances names (either colnames ExperimentList element names) inconsistent found sampleMap. Input arguments MultiAssayExperiment (.e., ExperimentList, colData, sampleMap). resulting output prepMultiAssay function list inputs including “metadata$drops” element names able matched. Instances ExperimentList created without names prompt error prepMultiAssay. Named ExperimentList elements essential checks MultiAssayExperiment. Non-matching names may also present ExperimentList elements “assay” column sampleMap. names differ case identical unique, names standardized lower case replaced. colnames ExperimentList matched back primary data (colData), dropped added drops element. similar operation performed checking “primary” sampleMap names colData rownames. example, add row corresponding “Joe” match experimental data. create MultiAssayExperiment results prepMultiAssay function, take corresponding element resulting list enter arguments MultiAssayExperiment constructor function. Alternatively, use .call function easily create MultiAssayExperiment output prepMultiAssay function:","code":"objlist3 <- objlist (names(objlist3) <- NULL) ## NULL try(prepMultiAssay(objlist3, patient.data, dfmap)$experiments,     outFile = stdout()) ## Error in prepMultiAssay(objlist3, patient.data, dfmap) :  ##   ExperimentList does not have names, assign names names(objlist3) <- toupper(names(objlist)) names(objlist3) ## [1] \"AFFY\"        \"METHYL 450K\" \"MIRNA\"       \"CNV GISTIC\" unique(dfmap[, \"assay\"]) ## [1] Affy        Methyl 450k Mirna       CNV gistic  ## Levels: Affy Methyl 450k Mirna CNV gistic prepMultiAssay(objlist3, patient.data, dfmap)$experiments ##  ## Names in the ExperimentList do not match sampleMap assay ## standardizing will be attempted... ##  - names set to lowercase ## ExperimentList class object of length 4: ##  [1] affy: SummarizedExperiment with 2 rows and 4 columns ##  [2] methyl 450k: matrix with 2 rows and 5 columns ##  [3] mirna: matrix with 4 rows and 3 columns ##  [4] cnv gistic: RangedSummarizedExperiment with 5 rows and 4 columns exampleMap <- sampleMap(simpleMultiAssay2) sapply(doubleExp, colnames) ## $`methyl 2k` ## [1] \"Jack\"  \"Jill\"  \"Bob\"   \"Bobby\" ##  ## $`methyl 3k` ## [1] \"Jack\" \"Jane\" \"Bob\" exampleMap ## DataFrame with 5 rows and 3 columns ##       assay     primary     colname ##    <factor> <character> <character> ## 1 methyl 2k        Jack        Jack ## 2 methyl 2k        Jill        Jill ## 3 methyl 2k         Bob         Bob ## 4 methyl 3k        Jack        Jack ## 5 methyl 3k         Bob         Bob prepMultiAssay(doubleExp, patient.data, exampleMap)$metadata$drops ##  ## Not all colnames in the ExperimentList are found in the  ## sampleMap, dropping samples from ExperimentList... ## $`methyl 2k` ## [1] \"Bobby\" ##  ## $`methyl 3k` ## [1] \"Jane\" ## $`columns.methyl 2k` ## [1] \"Bobby\" ##  ## $`columns.methyl 3k` ## [1] \"Jane\" exMap <- rbind(dfmap,     DataFrame(assay = \"New methyl\", primary = \"Joe\",         colname = \"Joe\")) invisible(prepMultiAssay(objlist, patient.data, exMap)) ## Warning in prepMultiAssay(objlist, patient.data, exMap):  ## Lengths of names in the ExperimentList and sampleMap ##  are not equal ##  ## Not all names in the primary column of the sampleMap ##  could be matched to the colData rownames; see $drops ## DataFrame with 1 row and 3 columns ##        assay     primary     colname ##     <factor> <character> <character> ## 1 New methyl         Joe         Joe prepped <- prepMultiAssay(objlist, patient.data, exMap) ## Warning in prepMultiAssay(objlist, patient.data, exMap):  ## Lengths of names in the ExperimentList and sampleMap ##  are not equal ##  ## Not all names in the primary column of the sampleMap ##  could be matched to the colData rownames; see $drops ## DataFrame with 1 row and 3 columns ##        assay     primary     colname ##     <factor> <character> <character> ## 1 New methyl         Joe         Joe preppedMulti <- MultiAssayExperiment(prepped$experiments, prepped$colData,     prepped$sampleMap, prepped$metadata) preppedMulti ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 4 columns ##  [2] Methyl 450k: matrix with 2 rows and 5 columns ##  [3] Mirna: matrix with 4 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files do.call(MultiAssayExperiment, prepped) ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 4 columns ##  [2] Methyl 450k: matrix with 2 rows and 5 columns ##  [3] Mirna: matrix with 4 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"helper-functions-to-create-bioconductor-classes-from-raw-data","dir":"Articles","previous_headings":"Creating a MultiAssayExperiment object: a rich example","what":"Helper functions to create Bioconductor classes from raw data","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"Recent updates GenomicRanges SummarizedExperiment packages allow user create standard Bioconductor classes raw data. Raw data read either data.frame DataFrame can converted GRangesList SummarizedExperiment classes depending type data. function create GRangesList data.frame, called makeGRangesListFromDataFrame can found GenomicRanges package. makeSummarizedExperimentFromDataFrame available SummarizedExperiment package. also possible create RangedSummarizedExperiment class object raw data ranged data available. simple example can obtained function documentation GenomicRanges: can converted RaggedExperiment object rectangular representation conform easily MultiAssayExperiment API requirements. Note. See RaggedExperiment vignette details. SummarizedExperiment package: back top","code":"grlls <- list(chr = rep(\"chr1\", nrows), start = seq(11, 15),     end = seq(12, 16), strand = c(\"+\", \"-\", \"+\", \"*\", \"*\"),     score = seq(1, 5), specimen = c(\"a\", \"a\", \"b\", \"b\", \"c\"),     gene_symbols = paste0(\"GENE\", letters[seq_len(nrows)]))  grldf <- as.data.frame(grlls, stringsAsFactors = FALSE)  GRL <- makeGRangesListFromDataFrame(grldf, split.field = \"specimen\",     names.field = \"gene_symbols\") RaggedExperiment(GRL) ## class: RaggedExperiment  ## dim: 5 3  ## assays(0): ## rownames(5): GENEa GENEb GENEc GENEd GENEe ## colnames(3): a b c ## colData names(0): sels <- list(chr = rep(\"chr2\", nrows), start = seq(11, 15),     end = seq(12, 16), strand = c(\"+\", \"-\", \"+\", \"*\", \"*\"),     expr0 = seq(3, 7), expr1 = seq(8, 12), expr2 = seq(12, 16)) sedf <- as.data.frame(sels,     row.names = paste0(\"GENE\", letters[rev(seq_len(nrows))]),     stringsAsFactors = FALSE) sedf ##        chr start end strand expr0 expr1 expr2 ## GENEe chr2    11  12      +     3     8    12 ## GENEd chr2    12  13      -     4     9    13 ## GENEc chr2    13  14      +     5    10    14 ## GENEb chr2    14  15      *     6    11    15 ## GENEa chr2    15  16      *     7    12    16 makeSummarizedExperimentFromDataFrame(sedf) ## class: RangedSummarizedExperiment  ## dim: 5 3  ## metadata(0): ## assays(1): '' ## rownames(5): GENEe GENEd GENEc GENEb GENEa ## rowData names(0): ## colnames(3): expr0 expr1 expr2 ## colData names(0):"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"integrated-subsetting-across-experiments","dir":"Articles","previous_headings":"","what":"Integrated subsetting across experiments","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"MultiAssayExperiment allows subsetting rows, columns, assays, rownames, colnames, across experiments simultaneously guaranteeing continued matching samples. Subsetting can done compactly square bracket method, verbosely potentially flexibly subsetBy*() methods.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"subsetting-by-square-bracket","dir":"Articles","previous_headings":"Integrated subsetting across experiments","what":"Subsetting by square bracket [","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"three positions within bracket operator indicate rows, columns, assays, respectively (pseudocode): example, select gene “ENST00000355076”: operation works across types assays, whether ID-based (e.g. matrix, ExpressionSet, SummarizedExperiment) range-based (e.g. RangedSummarizedExperiment). Note using bracket method [, drop argument TRUE default. can subset rows, columns, assays single bracket operation, performed order (rows, columns, assays). following selects ENST00000355076 gene across samples, first two samples assay, finally Affy Methyl 450k assays:","code":"myMultiAssay[rows, columns, assays] myMultiAssay[\"ENST00000355076\", , ] ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 1 rows and 4 columns ##  [2] Methyl 450k: matrix with 1 rows and 5 columns ##  [3] Mirna: matrix with 0 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 0 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files myMultiAssay[\"ENST00000355076\", 1:2, c(\"Affy\", \"Methyl 450k\")] ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 3 sampleMap rows not in names(experiments) ## A MultiAssayExperiment object of 2 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 2: ##  [1] Affy: SummarizedExperiment with 1 rows and 2 columns ##  [2] Methyl 450k: matrix with 1 rows and 3 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"subsetting-by-character-integer-and-logical","dir":"Articles","previous_headings":"Integrated subsetting across experiments","what":"Subsetting by character, integer, and logical","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"columns - character, integer, logical allowed, example: assay - character, integer, logical allowed:","code":"myMultiAssay[, \"Jack\", ] ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 1 columns ##  [2] Methyl 450k: matrix with 2 rows and 2 columns ##  [3] Mirna: matrix with 4 rows and 1 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 1 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files myMultiAssay[, 1, ] ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 1 columns ##  [2] Methyl 450k: matrix with 2 rows and 2 columns ##  [3] Mirna: matrix with 4 rows and 1 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 1 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files myMultiAssay[, c(TRUE, FALSE, FALSE, FALSE), ] ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 1 columns ##  [2] Methyl 450k: matrix with 2 rows and 2 columns ##  [3] Mirna: matrix with 4 rows and 1 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 1 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files myMultiAssay[, , \"Mirna\"] ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 13 sampleMap rows not in names(experiments) ##   removing 1 colData rownames not in sampleMap 'primary' ## A MultiAssayExperiment object of 1 listed ##  experiment with a user-defined name and respective class. ##  Containing an ExperimentList class object of length 1: ##  [1] Mirna: matrix with 4 rows and 3 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files myMultiAssay[, , 3] ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 13 sampleMap rows not in names(experiments) ##   removing 1 colData rownames not in sampleMap 'primary' ## A MultiAssayExperiment object of 1 listed ##  experiment with a user-defined name and respective class. ##  Containing an ExperimentList class object of length 1: ##  [1] Mirna: matrix with 4 rows and 3 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files myMultiAssay[, , c(FALSE, FALSE, TRUE, FALSE, FALSE)] ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 13 sampleMap rows not in names(experiments) ##   removing 1 colData rownames not in sampleMap 'primary' ## A MultiAssayExperiment object of 1 listed ##  experiment with a user-defined name and respective class. ##  Containing an ExperimentList class object of length 1: ##  [1] Mirna: matrix with 4 rows and 3 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"the-drop-argument","dir":"Articles","previous_headings":"Integrated subsetting across experiments","what":"the “drop” argument","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"Specify drop=FALSE keep assays zero rows zero columns, e.g.: Using default drop=TRUE, assays rows columns removed:","code":"myMultiAssay[\"ENST00000355076\", , , drop=FALSE] ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 1 rows and 4 columns ##  [2] Methyl 450k: matrix with 1 rows and 5 columns ##  [3] Mirna: matrix with 0 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 0 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files myMultiAssay[\"ENST00000355076\", , , drop=TRUE] ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 7 sampleMap rows not in names(experiments) ## A MultiAssayExperiment object of 2 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 2: ##  [1] Affy: SummarizedExperiment with 1 rows and 4 columns ##  [2] Methyl 450k: matrix with 1 rows and 5 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"more-on-subsetting-by-columns","dir":"Articles","previous_headings":"Integrated subsetting across experiments","what":"More on subsetting by columns","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"Experimental samples stored rows colData columns elements ExperimentList, refer subsetting columns, referring columns experimental assays. Subsetting samples / columns obvious recalling colData: Subsetting samples identifies selected samples rows colData DataFrame, selects columns ExperimentList corresponding rows. use integer keep first two rows colData, experimental assays associated two primary samples: Note operation keeps different numbers columns / samples assay, reflecting reality samples may assayed experiments, may replicates . Columns can subset using logical vector. dollar sign operator ($) accesses one columns colData. Finally, special use cases can exert detailed control row column subsetting, using list CharacterList subset. following creates CharacterList column names assay: Now let’s get rid three Methyl 450k arrays, positions 3, 4, 5:","code":"colData(myMultiAssay) ## DataFrame with 4 rows and 2 columns ##                 sex       age ##         <character> <integer> ## Jack              M        38 ## Jill              F        39 ## Bob               M        40 ## Barbara           F        41 myMultiAssay[, 1:2] ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 2 columns ##  [2] Methyl 450k: matrix with 2 rows and 3 columns ##  [3] Mirna: matrix with 4 rows and 1 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 2 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files malesMultiAssay <- myMultiAssay[, myMultiAssay$sex == \"M\"] colData(malesMultiAssay) ## DataFrame with 2 rows and 2 columns ##              sex       age ##      <character> <integer> ## Jack           M        38 ## Bob            M        40 allsamples <- colnames(myMultiAssay) allsamples ## CharacterList of length 4 ## [[\"Affy\"]] array1 array2 array3 array4 ## [[\"Methyl 450k\"]] methyl1 methyl2 methyl3 methyl4 methyl5 ## [[\"Mirna\"]] micro1 micro2 micro3 ## [[\"CNV gistic\"]] mysnparray1 mysnparray2 mysnparray3 mysnparray4 allsamples[[\"Methyl 450k\"]] <- allsamples[[\"Methyl 450k\"]][-3:-5] myMultiAssay[, as.list(allsamples), ] ## harmonizing input: ##   removing 3 sampleMap rows with 'colname' not in colnames of experiments ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 4 columns ##  [2] Methyl 450k: matrix with 2 rows and 2 columns ##  [3] Mirna: matrix with 4 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files subsetByColumn(myMultiAssay,  as.list(allsamples))  #equivalent ## harmonizing input: ##   removing 3 sampleMap rows with 'colname' not in colnames of experiments ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 4 columns ##  [2] Methyl 450k: matrix with 2 rows and 2 columns ##  [3] Mirna: matrix with 4 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"subsetting-assays","dir":"Articles","previous_headings":"Integrated subsetting across experiments","what":"Subsetting assays","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"can select certain assays / experiments using subset, providing character, logical, integer vector. example using character: can subset assays also using logical integer vectors:","code":"myMultiAssay[, , c(\"Affy\", \"CNV gistic\")] ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 8 sampleMap rows not in names(experiments) ## A MultiAssayExperiment object of 2 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 2: ##  [1] Affy: SummarizedExperiment with 2 rows and 4 columns ##  [2] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files is.cnv <- grepl(\"CNV\", names(experiments(myMultiAssay))) is.cnv ## [1] FALSE FALSE FALSE  TRUE myMultiAssay[, , is.cnv]  #logical subsetting ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 12 sampleMap rows not in names(experiments) ## A MultiAssayExperiment object of 1 listed ##  experiment with a user-defined name and respective class. ##  Containing an ExperimentList class object of length 1: ##  [1] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files myMultiAssay[, , which(is.cnv)] #integer subsetting ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 12 sampleMap rows not in names(experiments) ## A MultiAssayExperiment object of 1 listed ##  experiment with a user-defined name and respective class. ##  Containing an ExperimentList class object of length 1: ##  [1] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"subsetting-rows-features-by-ids-integers-or-logicals","dir":"Articles","previous_headings":"Integrated subsetting across experiments","what":"Subsetting rows (features) by IDs, integers, or logicals","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"Rows assays correspond assay features measurements, genes. Regardless whether assay ID-based (e.g., matrix, ExpressionSet) range-based (e.g., RangedSummarizedExperiment), can subset using following: character vector IDs matched rownames assay integer vector select rows position assay. probably doesn’t make sense unless every ExperimentList element represents measurements order generate error integer elements exceeds number rows ExperimentList element. likely use integer subsetting head function, example look first 6 rows assay. logical vector passed directly row subsetting operation assay. list List element names matching ExperimentList. element subsetting list passed exactly subset rows corresponding element ExperimentList. list List input allows selective subsetting. subsetting applied matching element names ExperimentList. example, take first two rows microRNA dataset, use named list indicate element want subset along drop = FALSE argument. , operations always return MultiAssayExperiment class, unless drop=TRUE passed [ backet subset, ExperimentList element containing feature zero rows. example, return MultiAssayExperiment Affy Methyl 450k contain “ENST0000035076”” row, “Mirna” “CNV gistic” zero rows (drop argument set FALSE default subsetBy*): following, Affy SummarizedExperiment keeps rows order reversed, Methyl 450k keeps second row.","code":"myMultiAssay[list(Mirna = 1:2), , ] ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 4 columns ##  [2] Methyl 450k: matrix with 2 rows and 5 columns ##  [3] Mirna: matrix with 2 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files ## equivalently subsetByRow(myMultiAssay, list(Mirna = 1:2)) ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 4 columns ##  [2] Methyl 450k: matrix with 2 rows and 5 columns ##  [3] Mirna: matrix with 2 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files featSub0 <- subsetByRow(myMultiAssay, \"ENST00000355076\") featSub1 <- myMultiAssay[\"ENST00000355076\", , drop = FALSE] #equivalent all.equal(featSub0, featSub1) ## [1] TRUE class(featSub1) ## [1] \"MultiAssayExperiment\" ## attr(,\"package\") ## [1] \"MultiAssayExperiment\" class(experiments(featSub1)) ## [1] \"ExperimentList\" ## attr(,\"package\") ## [1] \"MultiAssayExperiment\" experiments(featSub1) ## ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 1 rows and 4 columns ##  [2] Methyl 450k: matrix with 1 rows and 5 columns ##  [3] Mirna: matrix with 0 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 0 rows and 4 columns featSubsetted <-   subsetByRow(myMultiAssay, c(\"ENST00000355076\", \"ENST00000294241\")) assay(myMultiAssay, 1L) ##                 array1 array2 array3 array4 ## ENST00000294241    101    103    105    107 ## ENST00000355076    102    104    106    108 assay(featSubsetted, 1L) ##                 array1 array2 array3 array4 ## ENST00000355076    102    104    106    108 ## ENST00000294241    101    103    105    107"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"subsetting-rows-features-by-genomicranges","dir":"Articles","previous_headings":"Integrated subsetting across experiments","what":"Subsetting rows (features) by GenomicRanges","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"MultiAssayExperiment objects containing range-based objects (currently RangedSummarizedExperiment), can subset using GRanges object, example: Now subsetting. function work IRanges::subsetByOverlaps - see arguments flexible types subsetting range. first three arguments subset, rest passed IRanges::subsetByOverlaps “…”: Square bracket subsetting can still used , passing arguments IRanges::subsetByOverlaps “…” simpler using subsetByRow().","code":"gr <- GRanges(seqnames = c(\"chr1\", \"chr1\", \"chr2\"), strand = c(\"-\", \"+\", \"+\"),               ranges = IRanges(start = c(230602, 443625, 934533),                                end = c(330701, 443724, 934632))) subsetted <- subsetByRow(myMultiAssay, gr, maxgap = 2L, type = \"within\") experiments(subsetted) ## ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 0 rows and 4 columns ##  [2] Methyl 450k: matrix with 0 rows and 5 columns ##  [3] Mirna: matrix with 0 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 1 rows and 4 columns rowRanges(subsetted[[4]]) ## GRanges object with 1 range and 1 metadata column: ##     seqnames        ranges strand |  feature_id ##        <Rle>     <IRanges>  <Rle> | <character> ##   a     chr1 317182-317281      - |     ID\\\\001 ##   ------- ##   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"subsetting-is-endomorphic","dir":"Articles","previous_headings":"Integrated subsetting across experiments","what":"Subsetting is endomorphic","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"subsetByRow, subsetByColumn, subsetByAssay, square bracket subsetting “endomorphic” operations, always return another MultiAssayExperiment object.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"double-bracket-subsetting-to-select-experiments","dir":"Articles","previous_headings":"Integrated subsetting across experiments","what":"Double-bracket subsetting to select experiments","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"double-bracket subset operation refers experiment, return object contained within ExperimentList element. endomorphic. example, first ExperimentList element called “Affy” contains SummarizedExperiment: back top","code":"names(myMultiAssay) ## [1] \"Affy\"        \"Methyl 450k\" \"Mirna\"       \"CNV gistic\" myMultiAssay[[1]] ## class: SummarizedExperiment  ## dim: 2 4  ## metadata(0): ## assays(1): '' ## rownames(2): ENST00000294241 ENST00000355076 ## rowData names(0): ## colnames(4): array1 array2 array3 array4 ## colData names(1): slope53 myMultiAssay[[\"Affy\"]] ## class: SummarizedExperiment  ## dim: 2 4  ## metadata(0): ## assays(1): '' ## rownames(2): ENST00000294241 ENST00000355076 ## rowData names(0): ## colnames(4): array1 array2 array3 array4 ## colData names(1): slope53"},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"complete-cases","dir":"Articles","previous_headings":"Helpers for data clean-up and management","what":"complete.cases","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"complete.cases function returns logical vector colData rows identifying primary units data experiments. Recall myMultiAssay provides data four individuals: , Jack data 5 experiments: four complete cases Affy Methyl 450k: output can used select individuals complete data:","code":"colData(myMultiAssay) ## DataFrame with 4 rows and 2 columns ##                 sex       age ##         <character> <integer> ## Jack              M        38 ## Jill              F        39 ## Bob               M        40 ## Barbara           F        41 complete.cases(myMultiAssay) ## [1]  TRUE FALSE  TRUE  TRUE complete.cases(myMultiAssay[, , 1:2]) ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 7 sampleMap rows not in names(experiments) ## [1] TRUE TRUE TRUE TRUE myMultiAssay[, complete.cases(myMultiAssay), ] ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 3 columns ##  [2] Methyl 450k: matrix with 2 rows and 4 columns ##  [3] Mirna: matrix with 4 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 3 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"replicated","dir":"Articles","previous_headings":"Helpers for data clean-up and management","what":"replicated","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"replicated function identifies primary column values biological units multiple observations per assay. returns list LogicalLists indicate biological units one replicate measurements. output used merging replicates default.","code":"replicated(myMultiAssay) ## $Affy ## LogicalList of length 4 ## [[\"Barbara\"]] FALSE FALSE FALSE FALSE ## [[\"Bob\"]] FALSE FALSE FALSE FALSE ## [[\"Jack\"]] FALSE FALSE FALSE FALSE ## [[\"Jill\"]] FALSE FALSE FALSE FALSE ##  ## $`Methyl 450k` ## LogicalList of length 4 ## [[\"Barbara\"]] FALSE FALSE FALSE FALSE FALSE ## [[\"Bob\"]] FALSE FALSE FALSE FALSE FALSE ## [[\"Jack\"]] TRUE TRUE FALSE FALSE FALSE ## [[\"Jill\"]] FALSE FALSE FALSE FALSE FALSE ##  ## $Mirna ## LogicalList of length 3 ## [[\"Barbara\"]] FALSE FALSE FALSE ## [[\"Bob\"]] FALSE FALSE FALSE ## [[\"Jack\"]] FALSE FALSE FALSE ##  ## $`CNV gistic` ## LogicalList of length 4 ## [[\"Barbara\"]] FALSE FALSE FALSE FALSE ## [[\"Bob\"]] FALSE FALSE FALSE FALSE ## [[\"Jack\"]] FALSE FALSE FALSE FALSE ## [[\"Jill\"]] FALSE FALSE FALSE FALSE"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"intersectrows","dir":"Articles","previous_headings":"Helpers for data clean-up and management","what":"intersectRows","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"intersectRows function takes common rownames across experiments returns MultiAssayExperiment rows.","code":"(ensmblMatches <- intersectRows(myMultiAssay[, , 1:2])) ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 7 sampleMap rows not in names(experiments) ## A MultiAssayExperiment object of 2 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 2: ##  [1] Affy: SummarizedExperiment with 1 rows and 4 columns ##  [2] Methyl 450k: matrix with 1 rows and 5 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files rownames(ensmblMatches) ## CharacterList of length 2 ## [[\"Affy\"]] ENST00000355076 ## [[\"Methyl 450k\"]] ENST00000355076"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"intersectcolumns","dir":"Articles","previous_headings":"Helpers for data clean-up and management","what":"intersectColumns","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"call intersectColumns returns another MultiAssayExperiment columns element ExperimentList correspond exactly rows colData. many cases, operation returns 1--1 correspondence samples patients experiment assay unless replicates present data.","code":"intersectColumns(myMultiAssay) ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 3 columns ##  [2] Methyl 450k: matrix with 2 rows and 4 columns ##  [3] Mirna: matrix with 4 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 3 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"mergereplicates","dir":"Articles","previous_headings":"Helpers for data clean-up and management","what":"mergeReplicates","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"mergeReplicates function allows user specify function (default: mean) combining replicate columns assay element. can combined intersectColumns create MultiAssayExperiment object one measurement experiment per biological unit.","code":"mergeReplicates(intersectColumns(myMultiAssay)) ## harmonizing input: ##   removing 1 sampleMap rows with 'colname' not in colnames of experiments ## A MultiAssayExperiment object of 4 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 4: ##  [1] Affy: SummarizedExperiment with 2 rows and 3 columns ##  [2] Methyl 450k: matrix with 2 rows and 3 columns ##  [3] Mirna: matrix with 4 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 3 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"combine-c","dir":"Articles","previous_headings":"Helpers for data clean-up and management","what":"combine c","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"combine c function allows user append experiment list experiments already present MultiAssayExperiment. case additional observations set samples performed, c function can conveniently referenced existing assay contains ordering sample measurements. mapFrom argument indicates experiment exact organization samples introduced new experiment dataset. number columns new experiment match reference experiment, error thrown. introduce toy dataset created fly: Note: Alternatively, sampleMap additional dataset can provided. back top","code":"c(myMultiAssay, ExpScores = matrix(1:8, ncol = 4, dim = list(c(\"ENSMBL0001\", \"ENSMBL0002\"), paste0(\"pt\", 1:4))), mapFrom = 1L) ## Warning: Assuming column order in the data provided  ##  matches the order in 'mapFrom' experiment(s) colnames ## A MultiAssayExperiment object of 5 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 5: ##  [1] Affy: SummarizedExperiment with 2 rows and 4 columns ##  [2] Methyl 450k: matrix with 2 rows and 5 columns ##  [3] Mirna: matrix with 4 rows and 3 columns ##  [4] CNV gistic: RangedSummarizedExperiment with 5 rows and 4 columns ##  [5] ExpScores: matrix with 2 rows and 4 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"extractor-functions","dir":"Articles","previous_headings":"","what":"Extractor functions","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"Extractor functions convert MultiAssayExperiment forms convenient analyzing. normally called desired subsetting performed.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"getwithcoldata","dir":"Articles","previous_headings":"Extractor functions","what":"getWithColData","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"Provides single assay along associated ‘colData’ columns keeping assay class constant. error target data class support colData replacement method, meaning typically works SummarizedExperiment RaggedExperiment assays extensions.","code":"(affex <- getWithColData(myMultiAssay, 1L)) ## Warning: 'experiments' dropped; see 'drops()' ## class: SummarizedExperiment  ## dim: 2 4  ## metadata(0): ## assays(1): '' ## rownames(2): ENST00000294241 ENST00000355076 ## rowData names(0): ## colnames(4): array1 array2 array3 array4 ## colData names(3): slope53 sex age colData(affex) ## DataFrame with 4 rows and 3 columns ##          slope53         sex       age ##        <numeric> <character> <integer> ## array1  0.106685           M        38 ## array2 -0.587014           F        39 ## array3 -0.327854           F        41 ## array4 -0.085361           M        40 class(affex) ## [1] \"SummarizedExperiment\" ## attr(,\"package\") ## [1] \"SummarizedExperiment\""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"longformat-wideformat","dir":"Articles","previous_headings":"Extractor functions","what":"longFormat & wideFormat","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"Produces long (default) wide DataFrame objects. following produces long DataFrame (default) first two assays: especially useful performing regression patient sample data colData using pDataCols argument: “wide” format useful calculating correlations performing regression different genomic features. Wide format general possible replicate measurements, demonstrate cleaned MultiAssayExperiment first 5 columns:","code":"longFormat(myMultiAssay[, , 1:2]) ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 7 sampleMap rows not in names(experiments) ## DataFrame with 18 rows and 5 columns ##           assay     primary         rowname  colname     value ##     <character> <character>     <character> <factor> <integer> ## 1          Affy        Jack ENST00000294241   array1       101 ## 2          Affy        Jack ENST00000355076   array1       102 ## 3          Affy        Jill ENST00000294241   array2       103 ## 4          Affy        Jill ENST00000355076   array2       104 ## 5          Affy     Barbara ENST00000294241   array3       105 ## ...         ...         ...             ...      ...       ... ## 14  Methyl 450k        Jill ENST00000383706  methyl3         6 ## 15  Methyl 450k     Barbara ENST00000355076  methyl4         7 ## 16  Methyl 450k     Barbara ENST00000383706  methyl4         8 ## 17  Methyl 450k         Bob ENST00000355076  methyl5         9 ## 18  Methyl 450k         Bob ENST00000383706  methyl5        10 longFormat(myMultiAssay[, , 1:2], colDataCols=\"age\") ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 7 sampleMap rows not in names(experiments) ## DataFrame with 18 rows and 6 columns ##           assay     primary         rowname  colname     value       age ##     <character> <character>     <character> <factor> <integer> <integer> ## 1          Affy        Jack ENST00000294241   array1       101        38 ## 2          Affy        Jack ENST00000355076   array1       102        38 ## 3          Affy        Jill ENST00000294241   array2       103        39 ## 4          Affy        Jill ENST00000355076   array2       104        39 ## 5          Affy     Barbara ENST00000294241   array3       105        41 ## ...         ...         ...             ...      ...       ...       ... ## 14  Methyl 450k        Jill ENST00000383706  methyl3         6        39 ## 15  Methyl 450k     Barbara ENST00000355076  methyl4         7        41 ## 16  Methyl 450k     Barbara ENST00000383706  methyl4         8        41 ## 17  Methyl 450k         Bob ENST00000355076  methyl5         9        40 ## 18  Methyl 450k         Bob ENST00000383706  methyl5        10        40 maemerge <- mergeReplicates(intersectColumns(myMultiAssay)) ## harmonizing input: ##   removing 1 sampleMap rows with 'colname' not in colnames of experiments wideFormat(maemerge, colDataCols=\"sex\")[, 1:5] ## DataFrame with 3 rows and 5 columns ##       primary         sex Affy_ENST00000294241 Affy_ENST00000355076 ##   <character> <character>            <integer>            <integer> ## 1        Jack           M                  101                  102 ## 2         Bob           M                  107                  108 ## 3     Barbara           F                  105                  106 ##   Methyl.450k_ENST00000355076 ##                     <numeric> ## 1                           2 ## 2                           9 ## 3                           7"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"assay-assays","dir":"Articles","previous_headings":"Extractor functions","what":"assay / assays","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"assay (singular) function takes particular experiment returns matrix. default, return first experiment matrix. assays (plural) function returns SimpleList data matrices ExperimentList:","code":"assay(myMultiAssay) ##                 array1 array2 array3 array4 ## ENST00000294241    101    103    105    107 ## ENST00000355076    102    104    106    108 assays(myMultiAssay) ## List of length 4 ## names(4): Affy Methyl 450k Mirna CNV gistic"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"the-cancer-genome-atlas-and-multiassayexperiment","dir":"Articles","previous_headings":"","what":"The Cancer Genome Atlas and MultiAssayExperiment","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"recent efforts include release experiment data package, curatedTCGAData. package allow users selectively download cancer datasets Cancer Genome Atlas (TCGA) represent data MultiAssayExperiment objects. Please see package vignette details.","code":"BiocManager::install(\"curatedTCGAData\")"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"dimension-names-rownames-and-colnames","dir":"Articles","previous_headings":"","what":"Dimension names: rownames and colnames","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"rownames colnames return CharacterList row names column names across assays. CharacterList efficient alternative list used element contains character vector. also provides nice show method: back top","code":"rownames(myMultiAssay) ## CharacterList of length 4 ## [[\"Affy\"]] ENST00000294241 ENST00000355076 ## [[\"Methyl 450k\"]] ENST00000355076 ENST00000383706 ## [[\"Mirna\"]] hsa-miR-21 hsa-miR-191 hsa-miR-148a hsa-miR148b ## [[\"CNV gistic\"]] a b c d e colnames(myMultiAssay) ## CharacterList of length 4 ## [[\"Affy\"]] array1 array2 array3 array4 ## [[\"Methyl 450k\"]] methyl1 methyl2 methyl3 methyl4 methyl5 ## [[\"Mirna\"]] micro1 micro2 micro3 ## [[\"CNV gistic\"]] mysnparray1 mysnparray2 mysnparray3 mysnparray4"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"requirements-for-support-of-additional-data-classes","dir":"Articles","previous_headings":"","what":"Requirements for support of additional data classes","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"data classes ExperimentList object must support following methods: dimnames [ dim() happens one methods doesn’t:","code":"objlist2 <- objlist objlist2[[2]] <- as.vector(objlist2[[2]])  tryCatch(     MultiAssayExperiment(objlist2, patient.data, dfmap),     error = function(e) {         conditionMessage(e)     } ) ## [1] \"invalid class \\\"ExperimentList\\\" object: \\n    'integer' class is not supported, use a rectangular class\""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"application-programming-interface-api","dir":"Articles","previous_headings":"","what":"Application Programming Interface (API)","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"information formal API MultiAssayExperiment, please see API wiki document GitHub. API package available download GitHub via install(\"waldronlab/MultiAssayShiny\"). provides visual exploration available methods MultiAssayExperiment. back top","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"methods-for-multiassayexperiment","dir":"Articles","previous_headings":"","what":"Methods for MultiAssayExperiment","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"following methods defined MultiAssayExperiment:","code":"methods(class=\"MultiAssayExperiment\") ##  [1] [               [[              [[<-            [<-             ##  [5] $               $<-             anyReplicated   assay           ##  [9] assays          c               coerce          colData         ## [13] colData<-       colnames<-      complete.cases  dimnames        ## [17] drops           drops<-         experiments     experiments<-   ## [21] exportClass     hasRowRanges    isEmpty         length          ## [25] mergeReplicates metadata        metadata<-      names           ## [29] names<-         replicated      replicates      sampleMap       ## [33] sampleMap<-     show            showReplicated  splitAssays     ## [37] subsetByAssay   subsetByColData subsetByColumn  subsetByRow     ## [41] updateObject    ## see '?methods' for accessing help and source code"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/MultiAssayExperiment.html","id":"sessioninfo","dir":"Articles","previous_headings":"","what":"sessionInfo()","title":"MultiAssayExperiment: The Integrative Bioconductor Container","text":"back top","code":"sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] RaggedExperiment_1.28.1     MultiAssayExperiment_1.30.3 ##  [3] SummarizedExperiment_1.34.0 Biobase_2.64.0              ##  [5] GenomicRanges_1.56.1        GenomeInfoDb_1.40.1         ##  [7] IRanges_2.38.1              S4Vectors_0.42.1            ##  [9] BiocGenerics_0.50.0         MatrixGenerics_1.16.0       ## [11] matrixStats_1.4.1           BiocStyle_2.32.1            ##  ## loaded via a namespace (and not attached): ##  [1] xfun_0.47               bslib_0.8.0             htmlwidgets_1.6.4       ##  [4] lattice_0.22-6          vctrs_0.6.5             tools_4.4.1             ##  [7] generics_0.1.3          tibble_3.2.1            fansi_1.0.6             ## [10] highr_0.11              pkgconfig_2.0.3         BiocBaseUtils_1.6.0     ## [13] Matrix_1.7-0            desc_1.4.3              lifecycle_1.0.4         ## [16] GenomeInfoDbData_1.2.12 compiler_4.4.1          stringr_1.5.1           ## [19] textshaping_0.4.0       htmltools_0.5.8.1       sass_0.4.9              ## [22] yaml_2.3.10             pkgdown_2.1.0           pillar_1.9.0            ## [25] crayon_1.5.3            jquerylib_0.1.4         tidyr_1.3.1             ## [28] DelayedArray_0.30.1     cachem_1.1.0            abind_1.4-5             ## [31] tidyselect_1.2.1        digest_0.6.37           stringi_1.8.4           ## [34] purrr_1.0.2             dplyr_1.1.4             reshape2_1.4.4          ## [37] bookdown_0.40           fastmap_1.2.0           grid_4.4.1              ## [40] cli_3.6.3               SparseArray_1.4.8       magrittr_2.0.3          ## [43] S4Arrays_1.4.1          utf8_1.2.4              withr_3.0.1             ## [46] UCSC.utils_1.0.0        rmarkdown_2.28          XVector_0.44.0          ## [49] httr_1.4.7              ragg_1.3.2              evaluate_0.24.0         ## [52] knitr_1.48              rlang_1.1.4             Rcpp_1.0.13             ## [55] glue_1.7.0              BiocManager_1.30.25     jsonlite_1.8.8          ## [58] R6_2.5.1                plyr_1.8.9              systemfonts_1.1.0       ## [61] fs_1.6.4                zlibbioc_1.50.0"},{"path":[]},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"coldata---information-on-biological-units","dir":"Articles","previous_headings":"Component slots","what":"colData - information on biological units","title":"MultiAssayExperiment: Quick Start Guide","text":"DataFrame describing characteristics biological units, example clinical data patients. prepared datasets Cancer Genome Atlas, row one patient column clinical, pathological, subtype, variable. $ function provides shortcut accessing setting colData columns. Key points: * One row per patient * row maps zero observations experiment ExperimentList, .","code":"colData(miniACC)[1:4, 1:4] ## DataFrame with 4 rows and 4 columns ##                 patientID years_to_birth vital_status days_to_death ##               <character>      <integer>    <integer>     <integer> ## TCGA-OR-A5J1 TCGA-OR-A5J1             58            1          1355 ## TCGA-OR-A5J2 TCGA-OR-A5J2             44            1          1677 ## TCGA-OR-A5J3 TCGA-OR-A5J3             23            0            NA ## TCGA-OR-A5J4 TCGA-OR-A5J4             23            1           423 table(miniACC$race) ##  ##                     asian black or african american                     white  ##                         2                         1                        78"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"experimentlist---experiment-data","dir":"Articles","previous_headings":"Component slots","what":"ExperimentList - experiment data","title":"MultiAssayExperiment: Quick Start Guide","text":"base list ExperimentList object containing experimental datasets set samples collected. gets converted class ExperimentList construction. Key points: * One matrix-like dataset per list element (although even need matrix-like, see example RaggedExperiment package) * One matrix column per assayed specimen. matrix column must correspond exactly one row colData: words, must know patient cell line observation came . However, multiple columns can come patient, can data patient. * Matrix rows correspond variables, e.g. genes genomic ranges * ExperimentList elements can genomic range-based (e.g. SummarizedExperiment::RangedSummarizedExperiment-class RaggedExperiment::RaggedExperiment-class) ID-based data (e.g. SummarizedExperiment::SummarizedExperiment-class, Biobase::eSet-class base::matrix-class, DelayedArray::DelayedArray-class, derived classes) * data class can included ExperimentList, long supports: single-bracket subsetting ([), dimnames, dim. data classes defined Bioconductor meet requirements.","code":"experiments(miniACC) ## ExperimentList class object of length 5: ##  [1] RNASeq2GeneNorm: SummarizedExperiment with 198 rows and 79 columns ##  [2] gistict: SummarizedExperiment with 198 rows and 90 columns ##  [3] RPPAArray: SummarizedExperiment with 33 rows and 46 columns ##  [4] Mutations: matrix with 97 rows and 90 columns ##  [5] miRNASeqGene: SummarizedExperiment with 471 rows and 80 columns"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"samplemap---relationship-graph","dir":"Articles","previous_headings":"Component slots","what":"sampleMap - relationship graph","title":"MultiAssayExperiment: Quick Start Guide","text":"sampleMap graph representation relationship biological units experimental results. simple cases column names ExperimentList data matrices match row names colData, user won’t need specify think sample map, can created automatically MultiAssayExperiment constructor. sampleMap simple three-column DataFrame: assay column: name assay, found names ExperimentList list names primary column: identifiers patients biological units, found row names colData colname column: identifiers assay results, found column names ExperimentList elements Helper functions available creating map list. See ?listToMap Key points: * relates experimental observations (colnames) colData * permits experiment-specific sample naming, missing, replicate observations back top","code":"sampleMap(miniACC) ## DataFrame with 385 rows and 3 columns ##               assay      primary                colname ##            <factor>  <character>            <character> ## 1   RNASeq2GeneNorm TCGA-OR-A5J1 TCGA-OR-A5J1-01A-11R.. ## 2   RNASeq2GeneNorm TCGA-OR-A5J2 TCGA-OR-A5J2-01A-11R.. ## 3   RNASeq2GeneNorm TCGA-OR-A5J3 TCGA-OR-A5J3-01A-11R.. ## 4   RNASeq2GeneNorm TCGA-OR-A5J5 TCGA-OR-A5J5-01A-11R.. ## 5   RNASeq2GeneNorm TCGA-OR-A5J6 TCGA-OR-A5J6-01A-31R.. ## ...             ...          ...                    ... ## 381    miRNASeqGene TCGA-PA-A5YG TCGA-PA-A5YG-01A-11R.. ## 382    miRNASeqGene TCGA-PK-A5H8 TCGA-PK-A5H8-01A-11R.. ## 383    miRNASeqGene TCGA-PK-A5H9 TCGA-PK-A5H9-01A-11R.. ## 384    miRNASeqGene TCGA-PK-A5HA TCGA-PK-A5HA-01A-11R.. ## 385    miRNASeqGene TCGA-PK-A5HB TCGA-PK-A5HB-01A-11R.."},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"metadata","dir":"Articles","previous_headings":"Component slots","what":"metadata","title":"MultiAssayExperiment: Quick Start Guide","text":"Metadata can used keep additional information patients, assays performed individuals entire cohort, features genes, proteins, genomic ranges. many options available storing metadata. First, MultiAssayExperiment metadata describing entire experiment: Additionally, DataFrame class used sampleMap colData, well ExperimentList class, similarly support metadata. Finally, many experimental data objects can used ExperimentList support metadata. provide flexible options users developers derived classes.","code":"metadata(miniACC) ## $title ## [1] \"Comprehensive Pan-Genomic Characterization of Adrenocortical Carcinoma\" ##  ## $PMID ## [1] \"27165744\" ##  ## $sourceURL ## [1] \"http://s3.amazonaws.com/multiassayexperiments/accMAEO.rds\" ##  ## $RPPAfeatureDataURL ## [1] \"http://genomeportal.stanford.edu/pan-tcga/show_target_selection_file?filename=Allprotein.txt\" ##  ## $colDataExtrasURL ## [1] \"http://www.cell.com/cms/attachment/2062093088/2063584534/mmc3.xlsx\""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"single-bracket","dir":"Articles","previous_headings":"Subsetting","what":"Single bracket [","title":"MultiAssayExperiment: Quick Start Guide","text":"pseudo code , subsetting operations work rows following indices: 1. experimental data rows 2. j primary names column names (entered list List) 3. k assay Subsetting operations always return another MultiAssayExperiment. example, following return rows named “MAPK14” “IGFBP2”, remove assays rows match: following keep patients pathological stage iv, associated assays: following keep RNA-seq dataset, patients assay available:","code":"multiassayexperiment[i = rownames, j = primary or colnames, k = assay] miniACC[c(\"MAPK14\", \"IGFBP2\"), , ] stg4 <- miniACC$pathologic_stage == \"stage iv\" # remove NA values from vector miniACC[, stg4 & !is.na(stg4), ] miniACC[, , \"RNASeq2GeneNorm\"] ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 306 sampleMap rows not in names(experiments) ##   removing 13 colData rownames not in sampleMap 'primary'"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"subsetting-by-genomic-ranges","dir":"Articles","previous_headings":"Subsetting > Single bracket [","what":"Subsetting by genomic ranges","title":"MultiAssayExperiment: Quick Start Guide","text":"ExperimentList objects features represented genomic ranges (e.g. RangedSummarizedExperiment, RaggedExperiment), GRanges object first subsetting position subset objects GenomicRanges::findOverlaps().","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"double-bracket","dir":"Articles","previous_headings":"Subsetting","what":"Double bracket [[","title":"MultiAssayExperiment: Quick Start Guide","text":"“double bracket” method ([[) convenience function extracting single element MultiAssayExperiment ExperimentList. avoids use experiments(mae)[[1L]]. example, following extract ExpressionSet object containing RNA-seq data:","code":"miniACC[[1L]]  #or equivalently, miniACC[[\"RNASeq2GeneNorm\"]] ## class: SummarizedExperiment  ## dim: 198 79  ## metadata(3): experimentData annotation protocolData ## assays(1): exprs ## rownames(198): DIRAS3 MAPK14 ... SQSTM1 KCNJ13 ## rowData names(0): ## colnames(79): TCGA-OR-A5J1-01A-11R-A29S-07 TCGA-OR-A5J2-01A-11R-A29S-07 ##   ... TCGA-PK-A5HA-01A-11R-A29S-07 TCGA-PK-A5HB-01A-11R-A29S-07 ## colData names(0):"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"patients-with-complete-data","dir":"Articles","previous_headings":"Subsetting","what":"Patients with complete data","title":"MultiAssayExperiment: Quick Start Guide","text":"complete.cases() shows patients complete data assays: logical vector used patient subsetting. simply, intersectColumns() select complete cases rearrange ExperimentList element columns correspond exactly rows colData order: Note, column names assays accmatched assay-specific identifiers, automatically re-arranged correspond patients. TCGA assays, first three - delimited positions correspond patient, ie first patient TCGA--A5J2:","code":"summary(complete.cases(miniACC)) ##    Mode   FALSE    TRUE  ## logical      49      43 accmatched = intersectColumns(miniACC) colnames(accmatched) ## CharacterList of length 5 ## [[\"RNASeq2GeneNorm\"]] TCGA-OR-A5J2-01A-11R-A29S-07 ... ## [[\"gistict\"]] TCGA-OR-A5J2-01A-11D-A29H-01 ... TCGA-PK-A5HA-01A-11D-A29H-01 ## [[\"RPPAArray\"]] TCGA-OR-A5J2-01A-21-A39K-20 ... TCGA-PK-A5HA-01A-21-A39K-20 ## [[\"Mutations\"]] TCGA-OR-A5J2-01A-11D-A29I-10 ... TCGA-PK-A5HA-01A-11D-A29I-10 ## [[\"miRNASeqGene\"]] TCGA-OR-A5J2-01A-11R-A29W-13 ..."},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"row-names-that-are-common-across-assays","dir":"Articles","previous_headings":"Subsetting","what":"Row names that are common across assays","title":"MultiAssayExperiment: Quick Start Guide","text":"intersectRows() keeps rows common assay, aligns identical order. example, keep genes data available RNA-seq, GISTIC copy number, somatic mutations: back top","code":"accmatched2 <- intersectRows(miniACC[, , c(\"RNASeq2GeneNorm\",                                            \"gistict\",                                            \"Mutations\")]) ## Warning: 'experiments' dropped; see 'drops()' ## harmonizing input: ##   removing 126 sampleMap rows not in names(experiments) rownames(accmatched2) ## CharacterList of length 3 ## [[\"RNASeq2GeneNorm\"]] DIRAS3 G6PD KDR ERBB3 AKT1S1 ... RET CDKN2A MACC1 CHGA ## [[\"gistict\"]] DIRAS3 G6PD KDR ERBB3 AKT1S1 ... PREX1 RET CDKN2A MACC1 CHGA ## [[\"Mutations\"]] DIRAS3 G6PD KDR ERBB3 AKT1S1 ... PREX1 RET CDKN2A MACC1 CHGA"},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"assay-and-assays","dir":"Articles","previous_headings":"Extraction","what":"assay and assays","title":"MultiAssayExperiment: Quick Start Guide","text":"assay assays methods follow SummarizedExperiment convention. assay (singular) method extract first element ExperimentList return matrix. assays (plural) method return SimpleList data element matrix. Key point: * Whereas [[ returned assay original class, assay() assays() convert assay data matrix form. back top","code":"class(assay(miniACC)) ## [1] \"matrix\" \"array\" assays(miniACC) ## List of length 5 ## names(5): RNASeq2GeneNorm gistict RPPAArray Mutations miRNASeqGene"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"summary-of-slots-and-accessors","dir":"Articles","previous_headings":"","what":"Summary of slots and accessors","title":"MultiAssayExperiment: Quick Start Guide","text":"Slot MultiAssayExperiment can accessed set using accessor functions: __*__ $ operator MultiAssayExperiment returns single column colData.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"transformation-reshaping","dir":"Articles","previous_headings":"","what":"Transformation / reshaping","title":"MultiAssayExperiment: Quick Start Guide","text":"longFormat wideFormat functions “reshape” combine experiments colData one DataFrame. functions provide compatibility common R/Bioconductor functions regression, machine learning, visualization.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"longformat","dir":"Articles","previous_headings":"Transformation / reshaping","what":"longFormat","title":"MultiAssayExperiment: Quick Start Guide","text":"long format single column provides assay results, additional optional colData columns whose values repeated necessary. assay name ExperimentList element, primary patient identifier (rowname colData), rowname assay rowname (case genes), colname assay-specific identifier (column name), value numeric measurement (gene expression, copy number, presence non-silent mutation, etc), following vital_status days_to_death colData columns added:","code":"longFormat(miniACC[c(\"TP53\", \"CTNNB1\"), , ],            colDataCols = c(\"vital_status\", \"days_to_death\")) ## harmonizing input: ##   removing 126 sampleMap rows not in names(experiments) ## DataFrame with 518 rows and 7 columns ##               assay      primary     rowname                      colname ##         <character>  <character> <character>                     <factor> ## 1   RNASeq2GeneNorm TCGA-OR-A5J1        TP53 TCGA-OR-A5J1-01A-11R-A29S-07 ## 2   RNASeq2GeneNorm TCGA-OR-A5J1      CTNNB1 TCGA-OR-A5J1-01A-11R-A29S-07 ## 3   RNASeq2GeneNorm TCGA-OR-A5J2        TP53 TCGA-OR-A5J2-01A-11R-A29S-07 ## 4   RNASeq2GeneNorm TCGA-OR-A5J2      CTNNB1 TCGA-OR-A5J2-01A-11R-A29S-07 ## 5   RNASeq2GeneNorm TCGA-OR-A5J3        TP53 TCGA-OR-A5J3-01A-11R-A29S-07 ## ...             ...          ...         ...                          ... ## 514       Mutations TCGA-PK-A5HA      CTNNB1 TCGA-PK-A5HA-01A-11D-A29I-10 ## 515       Mutations TCGA-PK-A5HB        TP53 TCGA-PK-A5HB-01A-11D-A29I-10 ## 516       Mutations TCGA-PK-A5HB      CTNNB1 TCGA-PK-A5HB-01A-11D-A29I-10 ## 517       Mutations TCGA-PK-A5HC        TP53 TCGA-PK-A5HC-01A-11D-A30A-10 ## 518       Mutations TCGA-PK-A5HC      CTNNB1 TCGA-PK-A5HC-01A-11D-A30A-10 ##         value vital_status days_to_death ##     <numeric>    <integer>     <integer> ## 1     563.401            1          1355 ## 2    5634.467            1          1355 ## 3     165.481            1          1677 ## 4   62658.391            1          1677 ## 5     956.303            0            NA ## ...       ...          ...           ... ## 514         0            0            NA ## 515         0            0            NA ## 516         0            0            NA ## 517         0            0            NA ## 518         0            0            NA"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"wideformat","dir":"Articles","previous_headings":"Transformation / reshaping","what":"wideFormat","title":"MultiAssayExperiment: Quick Start Guide","text":"wide format, feature assay goes separate column, one row per primary identifier (patient). , variable becomes new column:","code":"wideFormat(miniACC[c(\"TP53\", \"CTNNB1\"), , ],            colDataCols = c(\"vital_status\", \"days_to_death\")) ## harmonizing input: ##   removing 126 sampleMap rows not in names(experiments) ## DataFrame with 92 rows and 9 columns ##          primary vital_status days_to_death RNASeq2GeneNorm_TP53 ##      <character>    <integer>     <integer>            <numeric> ## 1   TCGA-OR-A5J1            1          1355              563.401 ## 2   TCGA-OR-A5J2            1          1677              165.481 ## 3   TCGA-OR-A5J3            0            NA              956.303 ## 4   TCGA-OR-A5J4            1           423                   NA ## 5   TCGA-OR-A5J5            1           365             1169.636 ## ...          ...          ...           ...                  ... ## 88  TCGA-PK-A5H9            0            NA              890.866 ## 89  TCGA-PK-A5HA            0            NA              683.572 ## 90  TCGA-PK-A5HB            0            NA              237.370 ## 91  TCGA-PK-A5HC            0            NA                   NA ## 92  TCGA-P6-A5OG            1           383              815.345 ##     RNASeq2GeneNorm_CTNNB1 gistict_TP53 gistict_CTNNB1 Mutations_TP53 ##                  <numeric>    <numeric>      <numeric>      <numeric> ## 1                  5634.47            0              0              0 ## 2                 62658.39            0              1              1 ## 3                  6337.43            0              0              0 ## 4                       NA            1              0              0 ## 5                  5979.06            0              0              0 ## ...                    ...          ...            ...            ... ## 88                 5258.99            0              0              0 ## 89                 8120.17           -1              0              0 ## 90                 5257.81           -1             -1              0 ## 91                      NA            1              1              0 ## 92                 6390.10           -1              1             NA ##     Mutations_CTNNB1 ##            <numeric> ## 1                  0 ## 2                  1 ## 3                  0 ## 4                  0 ## 5                  0 ## ...              ... ## 88                 0 ## 89                 0 ## 90                 0 ## 91                 0 ## 92                NA"},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"multiassayexperiment-constructor-function","dir":"Articles","previous_headings":"MultiAssayExperiment class construction and concatenation","what":"MultiAssayExperiment constructor function","title":"MultiAssayExperiment: Quick Start Guide","text":"MultiAssayExperiment constructor function can take three arguments: experiments - ExperimentList list data colData - DataFrame describing patients (cell lines, biological units) sampleMap - DataFrame assay, primary, colname identifiers miniACC object can reconstructed follows:","code":"MultiAssayExperiment(experiments=experiments(miniACC),     colData=colData(miniACC),     sampleMap=sampleMap(miniACC),     metadata=metadata(miniACC)) ## A MultiAssayExperiment object of 5 listed ##  experiments with user-defined names and respective classes. ##  Containing an ExperimentList class object of length 5: ##  [1] RNASeq2GeneNorm: SummarizedExperiment with 198 rows and 79 columns ##  [2] gistict: SummarizedExperiment with 198 rows and 90 columns ##  [3] RPPAArray: SummarizedExperiment with 33 rows and 46 columns ##  [4] Mutations: matrix with 97 rows and 90 columns ##  [5] miRNASeqGene: SummarizedExperiment with 471 rows and 80 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"prepmultiassay---constructor-function-helper","dir":"Articles","previous_headings":"MultiAssayExperiment class construction and concatenation","what":"prepMultiAssay - Constructor function helper","title":"MultiAssayExperiment: Quick Start Guide","text":"prepMultiAssay function allows user diagnose typical problems creating MultiAssayExperiment object. See ?prepMultiAssay details.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"c---concatenate-to-multiassayexperiment","dir":"Articles","previous_headings":"MultiAssayExperiment class construction and concatenation","what":"c - concatenate to MultiAssayExperiment","title":"MultiAssayExperiment: Quick Start Guide","text":"c function allows user concatenate additional experiment existing MultiAssayExperiment. optional sampleMap argument allows concatenating assay whose column names match row names colData. convenience, mapFrom argument allows user map particular experiment provided order colnames . warning issued make user aware assumption. example, concatenate matrix log2-transformed RNA-seq results: back top","code":"miniACC2 <- c(miniACC,     log2rnaseq = log2(assays(miniACC)$RNASeq2GeneNorm), mapFrom=1L) ## Warning: Assuming column order in the data provided  ##  matches the order in 'mapFrom' experiment(s) colnames assays(miniACC2) ## List of length 6 ## names(6): RNASeq2GeneNorm gistict RPPAArray Mutations miRNASeqGene log2rnaseq"},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"upsetr-venn-diagram","dir":"Articles","previous_headings":"Examples","what":"UpsetR “Venn” diagram","title":"MultiAssayExperiment: Quick Start Guide","text":"see 43 samples 5 assays, 32 missing reverse-phase protein (RPPAArray), 2 missing Mutations, 1 missing gistict, 12 mutations gistict, etc:","code":"library(UpSetR) upsetSamples(miniACC)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"kaplan-meier-plot-stratified-by-a-clinical-variable","dir":"Articles","previous_headings":"Examples","what":"Kaplan-meier plot stratified by a clinical variable","title":"MultiAssayExperiment: Quick Start Guide","text":"colData can provide clinical data things like Kaplan-Meier plot overall survival stratified nodal stage. simplify things, first add “y” column colData, containing Surv object survival analysis: Note: survfit method work well DataFrame. bypass error, covert colData data.frame. remove patients missing overall survival information:","code":"library(survival) library(survminer)  coldat <- as.data.frame(colData(miniACC)) coldat$y <- Surv(miniACC$days_to_death, miniACC$vital_status) colData(miniACC) <- DataFrame(coldat) miniACC <- miniACC[, complete.cases(coldat$y), ] coldat <- as(colData(miniACC), \"data.frame\") fit <- survfit(y ~ pathology_N_stage, data = coldat) ggsurvplot(fit, data = coldat, risk.table = TRUE)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"multivariate-cox-regression-including-rna-seq-copy-number-and-pathology","dir":"Articles","previous_headings":"Examples","what":"Multivariate Cox regression including RNA-seq, copy number, and pathology","title":"MultiAssayExperiment: Quick Start Guide","text":"Choose EZH2 gene demonstration. subsetting drop assays row named EZH2: Perform multivariate Cox regression EZH2 copy number (gistict), log2-transformed EZH2 expression (RNASeq2GeneNorm), nodal status (pathology_N_stage) predictors: see EZH2 expression significantly associated overal survival (p < 0.001), EZH2 copy number nodal status . analysis easily extended whole genome discovery prognostic features repeated univariate regressions columns, penalized multivariate regression, etc. detail, see main MultiAssayExperiment vignette.","code":"wideacc <- wideFormat(miniACC[\"EZH2\", , ],     colDataCols = c(\"vital_status\", \"days_to_death\", \"pathology_N_stage\")) ## harmonizing input: ##   removing 76 sampleMap rows not in names(experiments) wideacc$y <- Surv(wideacc$days_to_death, wideacc$vital_status) head(wideacc) ## DataFrame with 6 rows and 7 columns ##        primary vital_status days_to_death pathology_N_stage ##    <character>    <integer>     <integer>       <character> ## 1 TCGA-OR-A5J1            1          1355                n0 ## 2 TCGA-OR-A5J2            1          1677                n0 ## 3 TCGA-OR-A5J4            1           423                n1 ## 4 TCGA-OR-A5J5            1           365                n0 ## 5 TCGA-OR-A5J7            1           490                n0 ## 6 TCGA-OR-A5J8            1           579                n0 ##   RNASeq2GeneNorm_EZH2 gistict_EZH2      y ##              <numeric>    <numeric> <Surv> ## 1              75.8886            0 1355:1 ## 2             326.5332            1 1677:1 ## 3                   NA           -2  423:1 ## 4             366.3826            1  365:1 ## 5             747.6935            1  490:1 ## 6             426.4401            1  579:1 coxph(Surv(days_to_death, vital_status) ~ gistict_EZH2 +           log2(RNASeq2GeneNorm_EZH2) + pathology_N_stage,  data=wideacc) ## Call: ## coxph(formula = Surv(days_to_death, vital_status) ~ gistict_EZH2 +  ##     log2(RNASeq2GeneNorm_EZH2) + pathology_N_stage, data = wideacc) ##  ##                                coef exp(coef) se(coef)      z        p ## gistict_EZH2               -0.03723   0.96345  0.28205 -0.132 0.894986 ## log2(RNASeq2GeneNorm_EZH2)  0.97731   2.65729  0.28105  3.477 0.000506 ## pathology_N_stagen1         0.37749   1.45862  0.56992  0.662 0.507743 ##  ## Likelihood ratio test=16.28  on 3 df, p=0.0009942 ## n= 26, number of events= 26  ##    (8 observations deleted due to missingness)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/QuickStartMultiAssay.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"MultiAssayExperiment: Quick Start Guide","text":"back top","code":"sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] survminer_0.4.9             ggpubr_0.6.0                ##  [3] ggplot2_3.5.1               survival_3.7-0              ##  [5] UpSetR_1.4.0                MultiAssayExperiment_1.30.3 ##  [7] SummarizedExperiment_1.34.0 Biobase_2.64.0              ##  [9] GenomicRanges_1.56.1        GenomeInfoDb_1.40.1         ## [11] IRanges_2.38.1              S4Vectors_0.42.1            ## [13] BiocGenerics_0.50.0         MatrixGenerics_1.16.0       ## [15] matrixStats_1.4.1           BiocStyle_2.32.1            ##  ## loaded via a namespace (and not attached): ##  [1] tidyselect_1.2.1        dplyr_1.1.4             farver_2.1.2            ##  [4] fastmap_1.2.0           digest_0.6.37           lifecycle_1.0.4         ##  [7] magrittr_2.0.3          compiler_4.4.1          rlang_1.1.4             ## [10] sass_0.4.9              tools_4.4.1             utf8_1.2.4              ## [13] yaml_2.3.10             data.table_1.16.0       knitr_1.48              ## [16] ggsignif_0.6.4          S4Arrays_1.4.1          labeling_0.4.3          ## [19] htmlwidgets_1.6.4       DelayedArray_0.30.1     xml2_1.3.6              ## [22] plyr_1.8.9              abind_1.4-5             withr_3.0.1             ## [25] purrr_1.0.2             desc_1.4.3              grid_4.4.1              ## [28] fansi_1.0.6             xtable_1.8-4            colorspace_2.1-1        ## [31] scales_1.3.0            cli_3.6.3               rmarkdown_2.28          ## [34] crayon_1.5.3            ragg_1.3.2              generics_0.1.3          ## [37] km.ci_0.5-6             httr_1.4.7              reshape2_1.4.4          ## [40] commonmark_1.9.1        BiocBaseUtils_1.6.0     cachem_1.1.0            ## [43] stringr_1.5.1           zlibbioc_1.50.0         splines_4.4.1           ## [46] BiocManager_1.30.25     XVector_0.44.0          survMisc_0.5.6          ## [49] vctrs_0.6.5             Matrix_1.7-0            carData_3.0-5           ## [52] jsonlite_1.8.8          bookdown_0.40           car_3.1-2               ## [55] rstatix_0.7.2           systemfonts_1.1.0       tidyr_1.3.1             ## [58] jquerylib_0.1.4         glue_1.7.0              pkgdown_2.1.0           ## [61] ggtext_0.1.2            stringi_1.8.4           gtable_0.3.5            ## [64] UCSC.utils_1.0.0        munsell_0.5.1           tibble_3.2.1            ## [67] pillar_1.9.0            htmltools_0.5.8.1       GenomeInfoDbData_1.2.12 ## [70] KMsurv_0.1-5            R6_2.5.1                textshaping_0.4.0       ## [73] evaluate_0.24.0         lattice_0.22-6          markdown_1.13           ## [76] highr_0.11              backports_1.5.0         gridtext_0.1.5          ## [79] broom_1.0.6             bslib_0.8.0             Rcpp_1.0.13             ## [82] gridExtra_2.3           SparseArray_1.4.8       xfun_0.47               ## [85] zoo_1.8-12              fs_1.6.4                pkgconfig_2.0.3"},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/UsingHDF5Array.html","id":"dependencies","dir":"Articles","previous_headings":"Integrating an HDF5 backend for MultiAssayExperiment","what":"Dependencies","title":"Using DelayedMatrix with MultiAssayExperiment","text":"","code":"library(MultiAssayExperiment) library(HDF5Array) library(SummarizedExperiment)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/UsingHDF5Array.html","id":"hdf5array-and-delayedarray-constructor","dir":"Articles","previous_headings":"Integrating an HDF5 backend for MultiAssayExperiment","what":"HDF5Array and DelayedArray Constructor","title":"Using DelayedMatrix with MultiAssayExperiment","text":"HDF5Array package provides -disk representation large datasets without need load memory. Convenient lazy evaluation operations allow user manipulate large data files based metadata. DelayedMatrix class DelayedArray package provides way connect large matrix stored disk. First, create small matrix constructing DelayedMatrix class. add rownames column names matrix object compatibility MultiAssayExperiment representation. use DelayedArray constructor function create DelayedMatrix object.","code":"smallMatrix <- matrix(rnorm(10e5), ncol = 20) rownames(smallMatrix) <- paste0(\"GENE\", seq_len(nrow(smallMatrix))) colnames(smallMatrix) <- paste0(\"SampleID\", seq_len(ncol(smallMatrix))) smallMatrix <- DelayedArray(smallMatrix) class(smallMatrix) ## [1] \"DelayedMatrix\" ## attr(,\"package\") ## [1] \"DelayedArray\" # show method smallMatrix ## <50000 x 20> DelayedMatrix object of type \"double\": ##              SampleID1    SampleID2    SampleID3 ...   SampleID19   SampleID20 ##     GENE1 -1.400043517  1.431663588 -1.336606503   . -2.307774531 -2.293199815 ##     GENE2  0.255317055  0.171127984  0.089914742   .  0.614199996 -0.335822358 ##     GENE3 -2.437263611  2.312015552  0.379995935   . -0.733181166  0.083092829 ##     GENE4 -0.005571287 -0.057850207 -0.056034294   .  0.818604632  0.106635015 ##     GENE5  0.621552721 -0.975709562  0.700863028   .  0.005259257  1.643080357 ##       ...            .            .            .   .            .            . ## GENE49996    0.2027090    0.4424774    0.6336781   .  -0.47392601   0.28854415 ## GENE49997    1.2847634    1.2558989    1.2587418   .  -2.52268507  -1.77342923 ## GENE49998    0.2648680    1.3883708   -0.3003243   .  -1.76756368   0.76883529 ## GENE49999    1.4098422    0.2065422   -0.4955832   .   1.59338432  -0.05131006 ## GENE50000   -0.7546331    0.6750468    0.1188484   .  -1.25230132   0.30771323 dim(smallMatrix) ## [1] 50000    20"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/UsingHDF5Array.html","id":"writing-to-a-file-with-dimnames","dir":"Articles","previous_headings":"Integrating an HDF5 backend for MultiAssayExperiment","what":"Writing to a file with dimnames","title":"Using DelayedMatrix with MultiAssayExperiment","text":"Finally, rhdf5 package stores dimnames standard location. order make use functionality, use writeHDF5Array .dimnames argument: see file structure use h5ls:","code":"testh5 <- tempfile(fileext = \".h5\") writeHDF5Array(smallMatrix, filepath = testh5, name = \"smallMatrix\",     with.dimnames = TRUE) ## <50000 x 20> HDF5Matrix object of type \"double\": ##              SampleID1    SampleID2    SampleID3 ...   SampleID19   SampleID20 ##     GENE1 -1.400043517  1.431663588 -1.336606503   . -2.307774531 -2.293199815 ##     GENE2  0.255317055  0.171127984  0.089914742   .  0.614199996 -0.335822358 ##     GENE3 -2.437263611  2.312015552  0.379995935   . -0.733181166  0.083092829 ##     GENE4 -0.005571287 -0.057850207 -0.056034294   .  0.818604632  0.106635015 ##     GENE5  0.621552721 -0.975709562  0.700863028   .  0.005259257  1.643080357 ##       ...            .            .            .   .            .            . ## GENE49996    0.2027090    0.4424774    0.6336781   .  -0.47392601   0.28854415 ## GENE49997    1.2847634    1.2558989    1.2587418   .  -2.52268507  -1.77342923 ## GENE49998    0.2648680    1.3883708   -0.3003243   .  -1.76756368   0.76883529 ## GENE49999    1.4098422    0.2065422   -0.4955832   .   1.59338432  -0.05131006 ## GENE50000   -0.7546331    0.6750468    0.1188484   .  -1.25230132   0.30771323 h5ls(testh5) ##                    group                  name       otype dclass        dim ## 0                      / .smallMatrix_dimnames   H5I_GROUP                   ## 1 /.smallMatrix_dimnames                     1 H5I_DATASET STRING      50000 ## 2 /.smallMatrix_dimnames                     2 H5I_DATASET STRING         20 ## 3                      /           smallMatrix H5I_DATASET  FLOAT 50000 x 20"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/UsingHDF5Array.html","id":"importing-hdf5-files","dir":"Articles","previous_headings":"Integrating an HDF5 backend for MultiAssayExperiment","what":"Importing HDF5 files","title":"Using DelayedMatrix with MultiAssayExperiment","text":"Note large matrix HDF5 file can also loaded using HDF5ArraySeed DelayedArray functions.","code":"hdf5Data <- HDF5ArraySeed(file = testh5, name = \"smallMatrix\") newDelayedMatrix <- DelayedArray(hdf5Data) class(newDelayedMatrix) ## [1] \"HDF5Matrix\" ## attr(,\"package\") ## [1] \"HDF5Array\" newDelayedMatrix ## <50000 x 20> HDF5Matrix object of type \"double\": ##              SampleID1    SampleID2    SampleID3 ...   SampleID19   SampleID20 ##     GENE1 -1.400043517  1.431663588 -1.336606503   . -2.307774531 -2.293199815 ##     GENE2  0.255317055  0.171127984  0.089914742   .  0.614199996 -0.335822358 ##     GENE3 -2.437263611  2.312015552  0.379995935   . -0.733181166  0.083092829 ##     GENE4 -0.005571287 -0.057850207 -0.056034294   .  0.818604632  0.106635015 ##     GENE5  0.621552721 -0.975709562  0.700863028   .  0.005259257  1.643080357 ##       ...            .            .            .   .            .            . ## GENE49996    0.2027090    0.4424774    0.6336781   .  -0.47392601   0.28854415 ## GENE49997    1.2847634    1.2558989    1.2587418   .  -2.52268507  -1.77342923 ## GENE49998    0.2648680    1.3883708   -0.3003243   .  -1.76756368   0.76883529 ## GENE49999    1.4098422    0.2065422   -0.4955832   .   1.59338432  -0.05131006 ## GENE50000   -0.7546331    0.6750468    0.1188484   .  -1.25230132   0.30771323"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/UsingHDF5Array.html","id":"using-a-delayedmatrix-with-multiassayexperiment","dir":"Articles","previous_headings":"Integrating an HDF5 backend for MultiAssayExperiment","what":"Using a DelayedMatrix with MultiAssayExperiment","title":"Using DelayedMatrix with MultiAssayExperiment","text":"DelayedMatrix alone conforms MultiAssayExperiment API requirements. Shown , DelayedMatrix can put named list passed MultiAssayExperiment constructor function.","code":"HDF5MAE <- MultiAssayExperiment(experiments = list(smallMatrix = smallMatrix)) sampleMap(HDF5MAE) ## DataFrame with 20 rows and 3 columns ##           assay     primary     colname ##        <factor> <character> <character> ## 1   smallMatrix   SampleID1   SampleID1 ## 2   smallMatrix   SampleID2   SampleID2 ## 3   smallMatrix   SampleID3   SampleID3 ## 4   smallMatrix   SampleID4   SampleID4 ## 5   smallMatrix   SampleID5   SampleID5 ## ...         ...         ...         ... ## 16  smallMatrix  SampleID16  SampleID16 ## 17  smallMatrix  SampleID17  SampleID17 ## 18  smallMatrix  SampleID18  SampleID18 ## 19  smallMatrix  SampleID19  SampleID19 ## 20  smallMatrix  SampleID20  SampleID20 colData(HDF5MAE) ## DataFrame with 20 rows and 0 columns"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/UsingHDF5Array.html","id":"summarizedexperiment-with-delayedmatrix-backend","dir":"Articles","previous_headings":"Integrating an HDF5 backend for MultiAssayExperiment > Using a DelayedMatrix with MultiAssayExperiment","what":"SummarizedExperiment with DelayedMatrix backend","title":"Using DelayedMatrix with MultiAssayExperiment","text":"information rich DelayedMatrix can created used conjunction SummarizedExperiment class can even include rowRanges. flexibility MultiAssayExperiment API supports classes minimal requirements. Additionally, SummarizedExperiment DelayedMatrix backend can part bigger MultiAssayExperiment object. minimal example work: Additional scenarios currently development HDF5Matrix hosted remotely. Many opportunities exist considering -disk -disk representations data MultiAssayExperiment.","code":"HDF5SE <- SummarizedExperiment(assays = smallMatrix) assay(HDF5SE) ## <50000 x 20> DelayedMatrix object of type \"double\": ##              SampleID1    SampleID2    SampleID3 ...   SampleID19   SampleID20 ##     GENE1 -1.400043517  1.431663588 -1.336606503   . -2.307774531 -2.293199815 ##     GENE2  0.255317055  0.171127984  0.089914742   .  0.614199996 -0.335822358 ##     GENE3 -2.437263611  2.312015552  0.379995935   . -0.733181166  0.083092829 ##     GENE4 -0.005571287 -0.057850207 -0.056034294   .  0.818604632  0.106635015 ##     GENE5  0.621552721 -0.975709562  0.700863028   .  0.005259257  1.643080357 ##       ...            .            .            .   .            .            . ## GENE49996    0.2027090    0.4424774    0.6336781   .  -0.47392601   0.28854415 ## GENE49997    1.2847634    1.2558989    1.2587418   .  -2.52268507  -1.77342923 ## GENE49998    0.2648680    1.3883708   -0.3003243   .  -1.76756368   0.76883529 ## GENE49999    1.4098422    0.2065422   -0.4955832   .   1.59338432  -0.05131006 ## GENE50000   -0.7546331    0.6750468    0.1188484   .  -1.25230132   0.30771323 MultiAssayExperiment(list(HDF5SE = HDF5SE)) ## A MultiAssayExperiment object of 1 listed ##  experiment with a user-defined name and respective class. ##  Containing an ExperimentList class object of length 1: ##  [1] HDF5SE: SummarizedExperiment with 50000 rows and 20 columns ## Functionality: ##  experiments() - obtain the ExperimentList instance ##  colData() - the primary/phenotype DataFrame ##  sampleMap() - the sample coordination DataFrame ##  `$`, `[`, `[[` - extract colData columns, subset, or experiment ##  *Format() - convert into a long or wide DataFrame ##  assays() - convert ExperimentList to a SimpleList of matrices ##  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/UsingHDF5Array.html","id":"session-info","dir":"Articles","previous_headings":"","what":"Session info","title":"Using DelayedMatrix with MultiAssayExperiment","text":"","code":"sessionInfo() ## R version 4.4.1 (2024-06-14) ## Platform: x86_64-pc-linux-gnu ## Running under: Ubuntu 22.04.4 LTS ##  ## Matrix products: default ## BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  ## LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 ##  ## locale: ##  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               ##  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     ##  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    ##  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  ##  [9] LC_ADDRESS=C               LC_TELEPHONE=C             ## [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        ##  ## time zone: Etc/UTC ## tzcode source: system (glibc) ##  ## attached base packages: ## [1] stats4    stats     graphics  grDevices utils     datasets  methods   ## [8] base      ##  ## other attached packages: ##  [1] HDF5Array_1.32.1            rhdf5_2.48.0                ##  [3] DelayedArray_0.30.1         SparseArray_1.4.8           ##  [5] S4Arrays_1.4.1              abind_1.4-5                 ##  [7] Matrix_1.7-0                MultiAssayExperiment_1.30.3 ##  [9] SummarizedExperiment_1.34.0 Biobase_2.64.0              ## [11] GenomicRanges_1.56.1        GenomeInfoDb_1.40.1         ## [13] IRanges_2.38.1              S4Vectors_0.42.1            ## [15] BiocGenerics_0.50.0         MatrixGenerics_1.16.0       ## [17] matrixStats_1.4.1           BiocStyle_2.32.1            ##  ## loaded via a namespace (and not attached): ##  [1] sass_0.4.9              lattice_0.22-6          digest_0.6.37           ##  [4] evaluate_0.24.0         grid_4.4.1              bookdown_0.40           ##  [7] fastmap_1.2.0           jsonlite_1.8.8          BiocManager_1.30.25     ## [10] httr_1.4.7              UCSC.utils_1.0.0        textshaping_0.4.0       ## [13] jquerylib_0.1.4         cli_3.6.3               rlang_1.1.4             ## [16] crayon_1.5.3            XVector_0.44.0          cachem_1.1.0            ## [19] yaml_2.3.10             tools_4.4.1             Rhdf5lib_1.26.0         ## [22] GenomeInfoDbData_1.2.12 R6_2.5.1                lifecycle_1.0.4         ## [25] zlibbioc_1.50.0         fs_1.6.4                htmlwidgets_1.6.4       ## [28] ragg_1.3.2              desc_1.4.3              pkgdown_2.1.0           ## [31] bslib_0.8.0             systemfonts_1.1.0       xfun_0.47               ## [34] knitr_1.48              rhdf5filters_1.16.0     htmltools_0.5.8.1       ## [37] rmarkdown_2.28          compiler_4.4.1"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/extras/MAE-curatedMetagenomicData.html","id":"fetch-from-curatedmetagenomicdata","dir":"Articles > Extras","previous_headings":"","what":"Fetch from curatedMetagenomicData","title":"Making use of curatedMetagenomicData","text":"Download data ExpressionSet list: Create MultiAssayExperiment:","code":"library(curatedMetagenomicData) esetlist <- list(taxa = ZellerG_2014.metaphlan_bugs_list.stool()[, 1:10],                  pathways = ZellerG_2014.pathabundance_relab.stool()) ## species and strain-level taxa only: esetlist$taxa <- esetlist$taxa[grep(\"s__\", rownames(esetlist$taxa)), ] ## eliminate taxa-specific pathway contributions (only total pathway abundances): esetlist$pathways <- esetlist$pathways[grep(\"g__\",                                    rownames(esetlist$pathways), invert=TRUE), ] library(MultiAssayExperiment) cmd <- MultiAssayExperiment(experiments=esetlist,      colData=colData(as(esetlist[[2]], \"SummarizedExperiment\"))) cmd rownames(cmd)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/extras/MAE-curatedMetagenomicData.html","id":"cca-with-omicade4","dir":"Articles > Extras","previous_headings":"Fetch from curatedMetagenomicData","what":"CCA with omicade4","title":"Making use of curatedMetagenomicData","text":"","code":"library(omicade4) cmdsub <- cmd[, cmd$disease %in% c(\"adenoma\", \"CRC\", \"healthy\"), ] ##Get rid of rows that are all zero: cmdsub <- cmdsub[lapply(assays(cmdsub), function(exper) rowSums(exper) > 0), ]  mcoin <- mcia(assay(cmdsub)) plot(mcoin, phenovec=cmdsub$disease, sample.lab=FALSE)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/extras/MAE-curatedMetagenomicData.html","id":"iclusterplus","dir":"Articles > Extras","previous_headings":"Fetch from curatedMetagenomicData","what":"iClusterPlus","title":"Making use of curatedMetagenomicData","text":"Error, “system computationally singular”","code":"library(iClusterPlus) datasets = assay(cmdsub) datasets = lapply(datasets, t) iclus = iCluster(datasets=datasets, k=5, lambda=c(0.2, 0.2)) plotiCluster(fit=iclus, label=cmdsub$disease)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/extras/MAE-curatedMetagenomicData.html","id":"sparse-cca","dir":"Articles > Extras","previous_headings":"Fetch from curatedMetagenomicData","what":"sparse CCA","title":"Making use of curatedMetagenomicData","text":"","code":"library(PMA) cmd2 <- mergeReplicates(intersectColumns(cmd)) ## ERROR: some columns have SD = 0 mycca <- PMA::CCA(x=t(assay(cmd2, 1)), z=t(assay(cmd2, 2))) mycca"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/articles/extras/MAE-curatedMetagenomicData.html","id":"others-to-try","dir":"Articles > Extras","previous_headings":"","what":"Others to try","title":"Making use of curatedMetagenomicData","text":"","code":"library(made4) library(MCIA) # library(Rtopper)  # gene set analysis"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marcel Ramos. Author, maintainer. Martin Morgan. Author, contributor. Lori Shepherd. Contributor. Hervé Pagès. Contributor. Vincent J Carey. Author, contributor. Levi Waldron. Author. MultiAssay SIG. Contributor.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ramos M, Schiffer L, Re , Azhar R, Basunia , Rodriguez Cabrera C, Chan T, Chapman P, Davis S, Gomez-Cabrero D, Culhane , Haibe-Kains B, Hansen K, Kodali H, Louis M, Mer , Reister M, Morgan M, Carey V, Waldron L (2017). “Software Integration Multi-Omics Experiments Bioconductor.” Cancer Research, 77(21), e39-42. doi:10.1158/0008-5472.CAN-17-0344, https://cancerres.aacrjournals.org/content/77/21/e39.","code":"@Article{,   title = {Software For The Integration Of Multi-Omics Experiments In Bioconductor},   author = {Marcel Ramos and Lucas Schiffer and Angela Re and Rimsha Azhar and Azfar Basunia and Carmen {Rodriguez Cabrera} and Tiffany Chan and Philip Chapman and Sean Davis and David Gomez-Cabrero and Aedin C. Culhane and Benjamin Haibe-Kains and Kasper Hansen and Hanish Kodali and Marie S Louis and Arvind S Mer and Markus Reister and Martin Morgan and Vincent J Carey and Levi Waldron},   journal = {Cancer Research},   year = {2017},   volume = {77},   number = {21},   pages = {e39-42},   doi = {10.1158/0008-5472.CAN-17-0344},   url = {https://cancerres.aacrjournals.org/content/77/21/e39}, }"},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/index.html","id":"software-for-the-integration-of-multi-omics-experiments-in-bioconductor","dir":"","previous_headings":"","what":"Software For The Integration Of Multi-Omics Experiments In Bioconductor","title":"Software for the integration of multi-omics experiments in Bioconductor","text":"https://doi.org/10.1158/0008-5472.CAN-17-0344","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Software for the integration of multi-omics experiments in Bioconductor","text":"recommend installing stable release version MultiAssayExperiment Bioconductor. can done using BiocManager:","code":"if (!require(\"BiocManager\"))     install.packages(\"BiocManager\")  library(BiocManager)  install(\"MultiAssayExperiment\")"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/index.html","id":"schematic","dir":"","previous_headings":"","what":"Schematic","title":"Software for the integration of multi-omics experiments in Bioconductor","text":"visual overview MultiAssayExperiment class. three main components : colData - phenotype data ExperimentList - list tables experimental results sampleMap - graph representation ‘samples’ ‘participants’ Note. simplicity, use terms ‘samples’ ‘participants’ elucidate relationship although MultiAssayExperiment can work biological specimens.","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/index.html","id":"ready-to-use-multiassayexperiment-objects","dir":"","previous_headings":"","what":"Ready-to-use MultiAssayExperiment objects","title":"Software for the integration of multi-omics experiments in Bioconductor","text":"easy--use ready-made MultiAssayExperiment objects, use curatedTCGAData experiment data package.","code":"install(\"curatedTCGAData\")"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/index.html","id":"companion-package-for-working-with-tcga-data","dir":"","previous_headings":"","what":"Companion package for working with TCGA data","title":"Software for the integration of multi-omics experiments in Bioconductor","text":"TCGAutils handy package working MultiAssayExperiment data objects curatedTCGAData. highly recommended use TCGAutils identifier manipulation, sample identification .","code":"install(\"TCGAutils\")"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Software for the integration of multi-omics experiments in Bioconductor","text":"MultiAssayExperiment API available browsing API wiki.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/index.html","id":"the-multiassayexperiment-bioconductor-special-interest-group","dir":"","previous_headings":"","what":"The MultiAssayExperiment Bioconductor Special Interest Group","title":"Software for the integration of multi-omics experiments in Bioconductor","text":"group meets remotely discuss project approximately every 3 weeks. interested, please join MultiAssayExperiment Google Group see calendar upcoming meetings.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/index.html","id":"contributor-code-of-conduct","dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Software for the integration of multi-omics experiments in Bioconductor","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, disrespectful conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant, version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList-class.html","id":null,"dir":"Reference","previous_headings":"","what":"ExperimentList - A container for multi-experiment data — ExperimentList-class","title":"ExperimentList - A container for multi-experiment data — ExperimentList-class","text":"ExperimentList class container builds SimpleList additional checks consistency experiment names length. contains SimpleList experiments sample identifiers. One element present per experiment performed. Convert SimpleList list multi-experiment data container. using mergeReplicates method, additional arguments passed given simplify function argument (e.g., na.rm = TRUE)","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"ExperimentList - A container for multi-experiment data — ExperimentList-class","text":"","code":"# S4 method for class 'ExperimentList' show(object)  # S4 method for class 'ExperimentList' isEmpty(x)  # S4 method for class 'ExperimentList' dimnames(x)  # S4 method for class 'ExperimentList' colnames(x, do.NULL = TRUE, prefix = \"col\")  # S4 method for class 'ExperimentList' rownames(x, do.NULL = TRUE, prefix = \"row\")  # S4 method for class 'ExperimentList' mergeReplicates(x, replicates = list(), simplify = BiocGenerics::mean, ...)  # S4 method for class 'ANY,missing' assay(x, i, withDimnames = TRUE, ...)  # S4 method for class 'ExperimentList' assays(x, withDimnames = TRUE, ...)  # S4 method for class 'ExperimentList,missing' assay(x, i, withDimnames = TRUE, ...)  # S4 method for class 'ExperimentList,numeric' assay(x, i, withDimnames = TRUE, ...)  # S4 method for class 'ExperimentList,character' assay(x, i, withDimnames = TRUE, ...)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"ExperimentList - A container for multi-experiment data — ExperimentList-class","text":"object, x ExperimentList object .NULL, prefix See ?base::rownames description     arguments. replicates mergeReplicates: list LogicalList element represents sample vector repeated measurements sample simplify function merging columns duplicates indicated replicates ... Additional arguments. See details information. scalar character integer index withDimnames logical (default TRUE) whether return dimension names","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"ExperimentList - A container for multi-experiment data — ExperimentList-class","text":"ExperimentList class object","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"ExperimentList - A container for multi-experiment data — ExperimentList-class","text":"show(ExperimentList): Show method ExperimentList class isEmpty(ExperimentList): check zero length across experiments dimnames(ExperimentList): Get dimension names ExperimentList using CharacterList colnames(ExperimentList): Get column names ExperimentList CharacterList slightly efficiently rownames(ExperimentList): Get row names ExperimentList CharacterList slightly efficiently mergeReplicates(ExperimentList): Apply mergeReplicates method ExperimentList elements assay(x = , = missing): Obtain specified assay numeric character reference assays(ExperimentList): Get assay data element ExperimentList","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList-class.html","id":"coercion","dir":"Reference","previous_headings":"","what":"coercion","title":"ExperimentList - A container for multi-experiment data — ExperimentList-class","text":"Convert list S4 List ExperimentList using () function. following example, x either list List:","code":"as(x, \"ExperimentList\")"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ExperimentList - A container for multi-experiment data — ExperimentList-class","text":"","code":"ExperimentList() #> ExperimentList class object of length 0: #>"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent multiple experiments as a List-derivative ExperimentList — ExperimentList","title":"Represent multiple experiments as a List-derivative ExperimentList — ExperimentList","text":"ExperimentList class can contain several different types data. requirements ExperimentList class objects contained following set methods: dim, [, dimnames","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent multiple experiments as a List-derivative ExperimentList — ExperimentList","text":"","code":"ExperimentList(...)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent multiple experiments as a List-derivative ExperimentList — ExperimentList","text":"... named list class object","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent multiple experiments as a List-derivative ExperimentList — ExperimentList","text":"ExperimentList class object experiment data","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/ExperimentList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent multiple experiments as a List-derivative ExperimentList — ExperimentList","text":"","code":"## Create an empty ExperimentList instance ExperimentList() #> ExperimentList class object of length 0: #>    ## Create array matrix and AnnotatedDataFrame to create an ExpressionSet class arraydat <- matrix(data = seq(101, length.out = 20), ncol = 4,     dimnames = list(         c(\"ENST00000294241\", \"ENST00000355076\",         \"ENST00000383706\",\"ENST00000234812\", \"ENST00000383323\"),         c(\"array1\", \"array2\", \"array3\", \"array4\")     ))  colDat <- data.frame(slope53 = rnorm(4),     row.names = c(\"array1\", \"array2\", \"array3\", \"array4\"))  ## SummarizedExperiment constructor exprdat <- SummarizedExperiment::SummarizedExperiment(arraydat,     colData = colDat)  ## Create a sample methylation dataset methyldat <- matrix(data = seq(1, length.out = 25), ncol = 5,     dimnames = list(         c(\"ENST00000355076\", \"ENST00000383706\",           \"ENST00000383323\", \"ENST00000234812\", \"ENST00000294241\"),         c(\"methyl1\", \"methyl2\", \"methyl3\",           \"methyl4\", \"methyl5\")     ))  ## Create a sample RNASeqGene dataset rnadat <- matrix(     data = sample(c(46851, 5, 19, 13, 2197, 507,         84318, 126, 17, 21, 23979, 614), size = 20, replace = TRUE),     ncol = 4,     dimnames = list(         c(\"XIST\", \"RPS4Y1\", \"KDM5D\", \"ENST00000383323\", \"ENST00000234812\"),         c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\")     ))  ## Create a mock RangedSummarizedExperiment from a data.frame rangedat <- data.frame(chr=\"chr2\", start = 11:15, end = 12:16,     strand = c(\"+\", \"-\", \"+\", \"*\", \".\"),     samp0 = c(0,0,1,1,1), samp1 = c(1,0,1,0,1), samp2 = c(0,1,0,1,0),     row.names = c(paste0(\"ENST\", \"00000\", 135411:135414), \"ENST00000383323\"))  rangeSE <- SummarizedExperiment::makeSummarizedExperimentFromDataFrame(rangedat)  ## Combine to a named list and call the ExperimentList constructor function assayList <- list(Affy = exprdat, Methyl450k = methyldat, RNASeqGene = rnadat,                 GISTIC = rangeSE)  ## Use the ExperimentList constructor ExpList <- ExperimentList(assayList)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/HDF5MultiAssayExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Save a MultiAssayExperiment class object to HDF5 and Rds files — saveHDF5MultiAssayExperiment","title":"Save a MultiAssayExperiment class object to HDF5 and Rds files — saveHDF5MultiAssayExperiment","text":"function takes MultiAssayExperiment object uses assays functionality obtain data matrices experiments. saved .h5 file format. function relies heavily HDF5Array package whose installation required use. saveHDF5MultiAssayExpeirment preserves classes contained ExperimentList exception matrix converted HDF5Matrix. Internal SummarizedExperiment assays converted HDF5-backed assays HDF5Array::saveHDF5SummarizedExperiment. SummarizedExperiment objects multiple -th assays first assay take precedence others assays dropped warning. first assay SummarizedExperiment contains array, array preserved process saving loading HDF5-backed MultiAssayExperiment.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/HDF5MultiAssayExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Save a MultiAssayExperiment class object to HDF5 and Rds files — saveHDF5MultiAssayExperiment","text":"","code":"saveHDF5MultiAssayExperiment(   x,   dir = \"h5_mae\",   prefix = NULL,   replace = FALSE,   chunkdim = NULL,   level = NULL,   as.sparse = NA,   verbose = NA )  loadHDF5MultiAssayExperiment(dir = \"h5_mae\", prefix = NULL)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/HDF5MultiAssayExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Save a MultiAssayExperiment class object to HDF5 and Rds files — saveHDF5MultiAssayExperiment","text":"x MultiAssayExperiment object derivative dir path (single string) directory save HDF5-based MultiAssayExperiment object load . saving, directory created already exist. directory already exists prefix specified replace set TRUE, replaced empty directory. prefix optional prefix add names files created inside dir. allows saving one object directory. prefix NULL, name x input MultiAssayExperiment used. avoid default setting use empty character string .e., \"\". underscore (_) appended prefix provided; therefore, typical inputs words, e.g., \"test\". replace prefix specified, pre-existing directory replaced     new empty one? content pre-existing directory     lost! chunkdim, level dimensions chunks compression level use     writing assay data disk. Passed internal calls writeHDF5Array.     See ?writeHDF5Array information. .sparse Whether assay data flagged sparse . set     NA (default), specific .sparse value     use assay determined calling is_sparse() . Passed internal calls writeHDF5Array.     See ?writeHDF5Array information     IMPORTANT NOTE. verbose Set TRUE make function display progress. case saveHDF5MultiAssayExperiment(), verbose set NA default, case verbosity controlled DelayedArray.verbose.block.processing option. Setting verbose TRUE FALSE overrides option.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/HDF5MultiAssayExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Save a MultiAssayExperiment class object to HDF5 and Rds files — saveHDF5MultiAssayExperiment","text":"","code":"data(\"miniACC\")  testDir <- file.path(tempdir(), \"test_mae\")  saveHDF5MultiAssayExperiment(     miniACC, dir = testDir, verbose = TRUE, replace = TRUE ) #> Start writing assay 1/5 to HDF5 file: #>   /tmp/RtmpXNWNbz/test_mae/miniACC_experiments.h5 #> / reading and realizing block 1/1 ...  #> ok #> \\ Writing it ...  #> OK #> Finished writing assay 1/5 to HDF5 file: #>   /tmp/RtmpXNWNbz/test_mae/miniACC_experiments.h5 #> Start writing assay 2/5 to HDF5 file: #>   /tmp/RtmpXNWNbz/test_mae/miniACC_experiments.h5 #> / reading and realizing block 1/1 ...  #> ok #> \\ Writing it ...  #> OK #> Finished writing assay 2/5 to HDF5 file: #>   /tmp/RtmpXNWNbz/test_mae/miniACC_experiments.h5 #> Start writing assay 3/5 to HDF5 file: #>   /tmp/RtmpXNWNbz/test_mae/miniACC_experiments.h5 #> / reading and realizing block 1/1 ...  #> ok #> \\ Writing it ...  #> OK #> Finished writing assay 3/5 to HDF5 file: #>   /tmp/RtmpXNWNbz/test_mae/miniACC_experiments.h5 #> Start writing assay 4/5 to HDF5 file: #>   /tmp/RtmpXNWNbz/test_mae/miniACC_experiments.h5 #> / reading and realizing block 1/1 ...  #> ok #> \\ Writing it ...  #> OK #> Finished writing assay 4/5 to HDF5 file: #>   /tmp/RtmpXNWNbz/test_mae/miniACC_experiments.h5 #> Start writing assay 5/5 to HDF5 file: #>   /tmp/RtmpXNWNbz/test_mae/miniACC_experiments.h5 #> / reading and realizing block 1/1 ...  #> ok #> \\ Writing it ...  #> OK #> Finished writing assay 5/5 to HDF5 file: #>   /tmp/RtmpXNWNbz/test_mae/miniACC_experiments.h5 #> Serialize MultiAssayExperiment object to RDS file: #>   /tmp/RtmpXNWNbz/test_mae/miniACC_mae.rds  ## inspect the files in the dir list.files(testDir) #> [1] \"miniACC_experiments.h5\" \"miniACC_mae.rds\"         loadHDF5MultiAssayExperiment(     dir = testDir ) #> A MultiAssayExperiment object of 5 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 5: #>  [1] RNASeq2GeneNorm: SummarizedExperiment with 198 rows and 79 columns #>  [2] gistict: SummarizedExperiment with 198 rows and 90 columns #>  [3] RPPAArray: SummarizedExperiment with 33 rows and 46 columns #>  [4] Mutations: HDF5Matrix with 97 rows and 90 columns #>  [5] miRNASeqGene: SummarizedExperiment with 471 rows and 80 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## remove example files unlink(testDir, recursive = TRUE)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MatchedAssayExperiment-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MatchedAssayExperiment - A matched-samples MultiAssayExperiment class — MatchedAssayExperiment-class","title":"MatchedAssayExperiment - A matched-samples MultiAssayExperiment class — MatchedAssayExperiment-class","text":"class supports use matched samples equal number observations per biological unit present assays.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MatchedAssayExperiment-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MatchedAssayExperiment - A matched-samples MultiAssayExperiment class — MatchedAssayExperiment-class","text":"","code":"MatchedAssayExperiment(...)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MatchedAssayExperiment-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MatchedAssayExperiment - A matched-samples MultiAssayExperiment class — MatchedAssayExperiment-class","text":"... Either single MultiAssayExperiment components create valid MultiAssayExperiment","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MatchedAssayExperiment-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MatchedAssayExperiment - A matched-samples MultiAssayExperiment class — MatchedAssayExperiment-class","text":"MatchedAssayExperiment object","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MatchedAssayExperiment-class.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"MatchedAssayExperiment - A matched-samples MultiAssayExperiment class — MatchedAssayExperiment-class","text":"MatchedAssayExperiment(): Construct MatchedAssayExperiment class MultiAssayExperiment","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MatchedAssayExperiment-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MatchedAssayExperiment - A matched-samples MultiAssayExperiment class — MatchedAssayExperiment-class","text":"","code":"data(\"miniACC\") acc <- as(miniACC, \"MatchedAssayExperiment\") acc #> A MatchedAssayExperiment object of 5 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 5: #>  [1] RNASeq2GeneNorm: SummarizedExperiment with 198 rows and 43 columns #>  [2] gistict: SummarizedExperiment with 198 rows and 43 columns #>  [3] RPPAArray: SummarizedExperiment with 33 rows and 43 columns #>  [4] Mutations: matrix with 97 rows and 43 columns #>  [5] miRNASeqGene: SummarizedExperiment with 471 rows and 43 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":null,"dir":"Reference","previous_headings":"","what":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"MultiAssayExperiment class can used manage results diverse assays collection specimen. Currently,  class can handle assays organized instances SummarizedExperiment, ExpressionSet, matrix, RaggedExperiment (inherits GRangesList), RangedVcfStack. Create new MultiAssayExperiment instances homonymous constructor, minimally argument ExperimentList, potentially also arguments colData (see section ) sampleMap.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"","code":"# S4 method for class 'MultiAssayExperiment' show(object)  # S4 method for class 'MultiAssayExperiment' length(x)  # S4 method for class 'MultiAssayExperiment' names(x)  # S4 method for class 'MultiAssayExperiment' updateObject(object, ..., verbose = FALSE)  # S4 method for class 'MultiAssayExperiment' dimnames(x)  # S4 method for class 'MultiAssayExperiment' c(x, ..., sampleMap = NULL, mapFrom = NULL)  # S4 method for class 'MultiAssayExperiment' exportClass(   object,   dir = tempdir(),   fmt,   ext,   match = FALSE,   verbose = TRUE,   ... )  # S4 method for class 'MultiAssayExperiment' assays(x, withDimnames = TRUE, ...)  # S4 method for class 'MultiAssayExperiment,missing' assay(x, i, withDimnames = TRUE, ...)  # S4 method for class 'MultiAssayExperiment,numeric' assay(x, i, withDimnames = TRUE, ...)  # S4 method for class 'MultiAssayExperiment,character' assay(x, i, withDimnames = TRUE, ...)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"object, x MultiAssayExperiment object ... Additional arguments supporting functions. See details. verbose logical(1) Whether print additional information (default TRUE) sampleMap c method: sampleMap list DataFrame guide merge mapFrom Either logical, character, integer vector indicating experiment(s) identical colname order experiment input(s). using character input, name must match exactly. dir character(1) directory saving exported data (default: tempdir()) fmt character(1) function() Either format character atomic supported write.table either ('csv', 'tsv') function whose first two arguments 'object save' 'file location' ext character(1) file extension supported format argument match logical(1) Whether coerce current object 'MatchedAssayExperiment' object (default: FALSE) withDimnames logical (default TRUE) whether return dimension names included object integer character scalar indicating assay return","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"MultiAssayExperiment object","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"dots (...) argument allows user specify additional arguments several instances. subsetting [: additional arguments sent findOverlaps. mergeReplicates: used specify arguments simplify functional argument assay: may contain withDimnames, forwarded assays combining c: compatible MultiAssayExperiment classes passed ExperimentList constructor, can list, List, series named arguments. See examples .","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":"methods-by-generic-","dir":"Reference","previous_headings":"","what":"Methods (by generic)","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"show(MultiAssayExperiment): Show method MultiAssayExperiment length(MultiAssayExperiment): Get length ExperimentList names(MultiAssayExperiment): Get names ExperimentList updateObject(MultiAssayExperiment): Update old serialized MultiAssayExperiment objects new API dimnames(MultiAssayExperiment): Get dimension names MultiAssayExperiment object c(MultiAssayExperiment): Add supported data class ExperimentList exportClass(MultiAssayExperiment): Export data class series text files assays(MultiAssayExperiment): Obtain SimpleList assay data available experiments object assay(x = MultiAssayExperiment, = missing): Convenience function extracting assay first element (default) ExperimentList. numeric character index can also provided","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":"slots","dir":"Reference","previous_headings":"","what":"Slots","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"ExperimentList ExperimentList class object assay dataset colData DataFrame clinical/specimen data available across experiments sampleMap DataFrame translatable identifiers samples participants metadata Additional data describing MultiAssayExperiment object drops metadata list dropped information","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":"coldata","dir":"Reference","previous_headings":"","what":"colData","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"colData slot collection primary specimen data valid across experiments. slot strictly class DataFrame arguments constructor function allow arguments class data.frame subsequently coerced.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":"experimentlist","dir":"Reference","previous_headings":"","what":"ExperimentList","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"ExperimentList slot designed contain results experiment/assay. contains SimpleList.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":"samplemap","dir":"Reference","previous_headings":"","what":"sampleMap","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"sampleMap contains DataFrame translatable identifiers samples participants biological units. standard column names sampleMap \"assay\", \"primary\", \"colname\". Note \"assay\" column factor corresponding names experiment ExperimentList. case names match sampleMap experiments, documented experiments sampleMap take precedence experiments dropped harmonization procedure. constructor function generate sampleMap case provided method may 'safer' alternative creating MultiAssayExperiment (long rownames identical colData, provided). empty sampleMap may produce empty experiments levels \"assay\" factor sampleMap match names ExperimentList.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":"coercion","dir":"Reference","previous_headings":"","what":"coercion","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"Convert list S4 List MultiAssayExperiment object using methods::function. following example, x either list List: (x, \"MultiAssayExperiment\") Convert MultiAssayExperiment MAF class object using methods::function. following example, x MultiAssayExperiment: MultiAssayExperimentToMAF(x)","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-class.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MultiAssayExperiment - An integrative multi-assay class for experiment data — MultiAssayExperiment-class","text":"","code":"example(\"MultiAssayExperiment\") #>  #> MltAsE> ## Run the example ExperimentList #> MltAsE> example(\"ExperimentList\") #>  #> ExprmL> ## Create an empty ExperimentList instance #> ExprmL> ExperimentList() #> ExperimentList class object of length 0: #>   #> ExprmL> ## Create array matrix and AnnotatedDataFrame to create an ExpressionSet class #> ExprmL> arraydat <- matrix(data = seq(101, length.out = 20), ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000294241\", \"ENST00000355076\", #> ExprmL+         \"ENST00000383706\",\"ENST00000234812\", \"ENST00000383323\"), #> ExprmL+         c(\"array1\", \"array2\", \"array3\", \"array4\") #> ExprmL+     )) #>  #> ExprmL> colDat <- data.frame(slope53 = rnorm(4), #> ExprmL+     row.names = c(\"array1\", \"array2\", \"array3\", \"array4\")) #>  #> ExprmL> ## SummarizedExperiment constructor #> ExprmL> exprdat <- SummarizedExperiment::SummarizedExperiment(arraydat, #> ExprmL+     colData = colDat) #>  #> ExprmL> ## Create a sample methylation dataset #> ExprmL> methyldat <- matrix(data = seq(1, length.out = 25), ncol = 5, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000355076\", \"ENST00000383706\", #> ExprmL+           \"ENST00000383323\", \"ENST00000234812\", \"ENST00000294241\"), #> ExprmL+         c(\"methyl1\", \"methyl2\", \"methyl3\", #> ExprmL+           \"methyl4\", \"methyl5\") #> ExprmL+     )) #>  #> ExprmL> ## Create a sample RNASeqGene dataset #> ExprmL> rnadat <- matrix( #> ExprmL+     data = sample(c(46851, 5, 19, 13, 2197, 507, #> ExprmL+         84318, 126, 17, 21, 23979, 614), size = 20, replace = TRUE), #> ExprmL+     ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"XIST\", \"RPS4Y1\", \"KDM5D\", \"ENST00000383323\", \"ENST00000234812\"), #> ExprmL+         c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\") #> ExprmL+     )) #>  #> ExprmL> ## Create a mock RangedSummarizedExperiment from a data.frame #> ExprmL> rangedat <- data.frame(chr=\"chr2\", start = 11:15, end = 12:16, #> ExprmL+     strand = c(\"+\", \"-\", \"+\", \"*\", \".\"), #> ExprmL+     samp0 = c(0,0,1,1,1), samp1 = c(1,0,1,0,1), samp2 = c(0,1,0,1,0), #> ExprmL+     row.names = c(paste0(\"ENST\", \"00000\", 135411:135414), \"ENST00000383323\")) #>  #> ExprmL> rangeSE <- SummarizedExperiment::makeSummarizedExperimentFromDataFrame(rangedat) #>  #> ExprmL> ## Combine to a named list and call the ExperimentList constructor function #> ExprmL> assayList <- list(Affy = exprdat, Methyl450k = methyldat, RNASeqGene = rnadat, #> ExprmL+                 GISTIC = rangeSE) #>  #> ExprmL> ## Use the ExperimentList constructor #> ExprmL> ExpList <- ExperimentList(assayList) #>  #> MltAsE> ## Create sample maps for each experiment #> MltAsE> exprmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"array1\", \"array2\", \"array3\", \"array4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> methylmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"methyl1\", \"methyl2\", \"methyl3\", \"methyl4\", \"methyl5\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> rnamap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\"), #> MltAsE+     colname = c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> gistmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Bob\", \"Jill\"), #> MltAsE+     colname = c(\"samp0\", \"samp1\", \"samp2\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> ## Combine as a named list and convert to a DataFrame #> MltAsE> maplist <- list(Affy = exprmap, Methyl450k = methylmap, #> MltAsE+     RNASeqGene = rnamap, GISTIC = gistmap) #>  #> MltAsE> ## Create a sampleMap #> MltAsE> sampMap <- listToMap(maplist) #>  #> MltAsE> ## Create an example phenotype data #> MltAsE> colDat <- data.frame(sex = c(\"M\", \"F\", \"M\", \"F\"), age = 38:41, #> MltAsE+     row.names = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\")) #>  #> MltAsE> ## Create a MultiAssayExperiment instance #> MltAsE> mae <- MultiAssayExperiment(experiments = ExpList, colData = colDat, #> MltAsE+     sampleMap = sampMap)  ## Subsetting # Rows (i) Rows/Features in each experiment mae[1, , ] #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 1 rows and 4 columns #>  [2] Methyl450k: matrix with 1 rows and 5 columns #>  [3] RNASeqGene: matrix with 1 rows and 4 columns #>  [4] GISTIC: RangedSummarizedExperiment with 1 rows and 3 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files mae[c(TRUE, FALSE), , ] #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 3 rows and 4 columns #>  [2] Methyl450k: matrix with 3 rows and 5 columns #>  [3] RNASeqGene: matrix with 3 rows and 4 columns #>  [4] GISTIC: RangedSummarizedExperiment with 3 rows and 3 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  # Columns (j) Rows in colData mae[, rownames(colData(mae))[3:2],  ] #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 5 rows and 2 columns #>  [2] Methyl450k: matrix with 5 rows and 2 columns #>  [3] RNASeqGene: matrix with 5 rows and 2 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 2 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  # Assays (k) mae[, , \"Affy\"] #> Warning: 'experiments' dropped; see 'drops()' #> harmonizing input: #>   removing 12 sampleMap rows not in names(experiments) #> A MultiAssayExperiment object of 1 listed #>  experiment with a user-defined name and respective class. #>  Containing an ExperimentList class object of length 1: #>  [1] Affy: SummarizedExperiment with 5 rows and 4 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## Complete cases (returns logical vector) completes <- complete.cases(mae) compMAE <- mae[, completes, ] compMAE #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 5 rows and 3 columns #>  [2] Methyl450k: matrix with 5 rows and 4 columns #>  [3] RNASeqGene: matrix with 5 rows and 3 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 3 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files colData(compMAE) #> DataFrame with 3 rows and 2 columns #>              sex       age #>      <character> <integer> #> Jack           M        38 #> Jill           F        39 #> Bob            M        40  example(\"MultiAssayExperiment\") #>  #> MltAsE> ## Run the example ExperimentList #> MltAsE> example(\"ExperimentList\") #>  #> ExprmL> ## Create an empty ExperimentList instance #> ExprmL> ExperimentList() #> ExperimentList class object of length 0: #>   #> ExprmL> ## Create array matrix and AnnotatedDataFrame to create an ExpressionSet class #> ExprmL> arraydat <- matrix(data = seq(101, length.out = 20), ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000294241\", \"ENST00000355076\", #> ExprmL+         \"ENST00000383706\",\"ENST00000234812\", \"ENST00000383323\"), #> ExprmL+         c(\"array1\", \"array2\", \"array3\", \"array4\") #> ExprmL+     )) #>  #> ExprmL> colDat <- data.frame(slope53 = rnorm(4), #> ExprmL+     row.names = c(\"array1\", \"array2\", \"array3\", \"array4\")) #>  #> ExprmL> ## SummarizedExperiment constructor #> ExprmL> exprdat <- SummarizedExperiment::SummarizedExperiment(arraydat, #> ExprmL+     colData = colDat) #>  #> ExprmL> ## Create a sample methylation dataset #> ExprmL> methyldat <- matrix(data = seq(1, length.out = 25), ncol = 5, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000355076\", \"ENST00000383706\", #> ExprmL+           \"ENST00000383323\", \"ENST00000234812\", \"ENST00000294241\"), #> ExprmL+         c(\"methyl1\", \"methyl2\", \"methyl3\", #> ExprmL+           \"methyl4\", \"methyl5\") #> ExprmL+     )) #>  #> ExprmL> ## Create a sample RNASeqGene dataset #> ExprmL> rnadat <- matrix( #> ExprmL+     data = sample(c(46851, 5, 19, 13, 2197, 507, #> ExprmL+         84318, 126, 17, 21, 23979, 614), size = 20, replace = TRUE), #> ExprmL+     ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"XIST\", \"RPS4Y1\", \"KDM5D\", \"ENST00000383323\", \"ENST00000234812\"), #> ExprmL+         c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\") #> ExprmL+     )) #>  #> ExprmL> ## Create a mock RangedSummarizedExperiment from a data.frame #> ExprmL> rangedat <- data.frame(chr=\"chr2\", start = 11:15, end = 12:16, #> ExprmL+     strand = c(\"+\", \"-\", \"+\", \"*\", \".\"), #> ExprmL+     samp0 = c(0,0,1,1,1), samp1 = c(1,0,1,0,1), samp2 = c(0,1,0,1,0), #> ExprmL+     row.names = c(paste0(\"ENST\", \"00000\", 135411:135414), \"ENST00000383323\")) #>  #> ExprmL> rangeSE <- SummarizedExperiment::makeSummarizedExperimentFromDataFrame(rangedat) #>  #> ExprmL> ## Combine to a named list and call the ExperimentList constructor function #> ExprmL> assayList <- list(Affy = exprdat, Methyl450k = methyldat, RNASeqGene = rnadat, #> ExprmL+                 GISTIC = rangeSE) #>  #> ExprmL> ## Use the ExperimentList constructor #> ExprmL> ExpList <- ExperimentList(assayList) #>  #> MltAsE> ## Create sample maps for each experiment #> MltAsE> exprmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"array1\", \"array2\", \"array3\", \"array4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> methylmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"methyl1\", \"methyl2\", \"methyl3\", \"methyl4\", \"methyl5\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> rnamap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\"), #> MltAsE+     colname = c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> gistmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Bob\", \"Jill\"), #> MltAsE+     colname = c(\"samp0\", \"samp1\", \"samp2\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> ## Combine as a named list and convert to a DataFrame #> MltAsE> maplist <- list(Affy = exprmap, Methyl450k = methylmap, #> MltAsE+     RNASeqGene = rnamap, GISTIC = gistmap) #>  #> MltAsE> ## Create a sampleMap #> MltAsE> sampMap <- listToMap(maplist) #>  #> MltAsE> ## Create an example phenotype data #> MltAsE> colDat <- data.frame(sex = c(\"M\", \"F\", \"M\", \"F\"), age = 38:41, #> MltAsE+     row.names = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\")) #>  #> MltAsE> ## Create a MultiAssayExperiment instance #> MltAsE> mae <- MultiAssayExperiment(experiments = ExpList, colData = colDat, #> MltAsE+     sampleMap = sampMap)  ## Add an experiment test1 <- mae[[1L]] colnames(test1) <- rownames(colData(mae))  ## Combine current MultiAssayExperiment with additional experiment ## (no sampleMap) c(mae, newExperiment = test1) #> A MultiAssayExperiment object of 5 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 5: #>  [1] Affy: SummarizedExperiment with 5 rows and 4 columns #>  [2] Methyl450k: matrix with 5 rows and 5 columns #>  [3] RNASeqGene: matrix with 5 rows and 4 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 3 columns #>  [5] newExperiment: SummarizedExperiment with 5 rows and 4 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  test2 <- mae[[3L]] c(mae, newExp = test2, mapFrom = 3L) #> Warning: Assuming column order in the data provided  #>  matches the order in 'mapFrom' experiment(s) colnames #> A MultiAssayExperiment object of 5 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 5: #>  [1] Affy: SummarizedExperiment with 5 rows and 4 columns #>  [2] Methyl450k: matrix with 5 rows and 5 columns #>  [3] RNASeqGene: matrix with 5 rows and 4 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 3 columns #>  [5] newExp: matrix with 5 rows and 4 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## Add experiment using experiment name in mapFrom c(mae, RNASeqGeneV2 = test2, mapFrom = \"RNASeqGene\") #> Warning: Assuming column order in the data provided  #>  matches the order in 'mapFrom' experiment(s) colnames #> A MultiAssayExperiment object of 5 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 5: #>  [1] Affy: SummarizedExperiment with 5 rows and 4 columns #>  [2] Methyl450k: matrix with 5 rows and 5 columns #>  [3] RNASeqGene: matrix with 5 rows and 4 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 3 columns #>  [5] RNASeqGeneV2: matrix with 5 rows and 4 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"set helper functions created help clean manipulate MultiAssayExperiment object. intersectRows also works ExperimentList objects. complete.cases: Returns logical vector corresponding 'colData' rows data across experiments isEmpty: Returns logical TRUE value zero length MultiAssayExperiment objects intersectRows: Takes common rows across experiments, excludes experiments empty rownames intersectColumns: wrapper complete.cases return MultiAssayExperiment biological units measurements across experiments replicated: Identifies, via logical vectors, colnames originate single biological unit within assay replicates: Provides replicate colnames found replicated function name, empty list none anyReplicated: Whether assay replicate measurements showReplicated: Displays actual columns replicated per assay biological unit, .e., primary value (colData rowname) sampleMap mergeReplicates: function combines replicated / repeated measurements across experiments guided replicated return value longFormat: MultiAssayExperiment method returns small skinny DataFrame. colDataCols arguments allows user append colData columns data. wideFormat: function reshape data MultiAssayExperiment \"wide\" format DataFrame. row DataFrame represents observation (corresponding entry colData). replicates present, data appended end corresponding row generate additional NA data. recommended remove consolidate technical replicates mergeReplicates. Optional colDataCols can added original object MultiAssayExperiment. hasRowRanges: function identifies ExperimentList elements rowRanges method getWithColData: convenience function extracting assay associated colData renamePrimary: convenience function rename primary biological units represented rownames(colData) renameColname: convenience function rename colnames particular assay","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"","code":"# S4 method for class 'MultiAssayExperiment' complete.cases(...)  # S4 method for class 'MultiAssayExperiment' isEmpty(x)  intersectRows(x)  intersectColumns(x)  replicated(x)  # S4 method for class 'MultiAssayExperiment' replicated(x)  anyReplicated(x)  # S4 method for class 'MultiAssayExperiment' anyReplicated(x)  showReplicated(x)  # S4 method for class 'MultiAssayExperiment' showReplicated(x)  replicates(x, ...)  # S4 method for class 'MultiAssayExperiment' replicates(x, ...)  mergeReplicates(x, replicates = list(), simplify = BiocGenerics::mean, ...)  # S4 method for class 'MultiAssayExperiment' mergeReplicates(   x,   replicates = replicated(x),   simplify = BiocGenerics::mean,   ... )  # S4 method for class 'ANY' mergeReplicates(x, replicates = list(), simplify = BiocGenerics::mean, ...)  longFormat(object, colDataCols = NULL, i = 1L)  wideFormat(   object,   colDataCols = NULL,   check.names = TRUE,   collapse = \"_\",   i = 1L )  hasRowRanges(x)  # S4 method for class 'MultiAssayExperiment' hasRowRanges(x)  # S4 method for class 'ExperimentList' hasRowRanges(x)  getWithColData(x, i, mode = c(\"append\", \"replace\"), verbose = FALSE)  renamePrimary(x, value)  renameColname(x, i, value)  splitAssays(x, hitList)  # S4 method for class 'MultiAssayExperiment' splitAssays(x, hitList)  makeHitList(x, patternList)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"... Additional arguments. See details information. x MultiAssayExperiment ExperimentList replicates list LogicalLists indicating multiple / duplicate entries biological unit per assay, see replicated (default replicated(x)). simplify function merging repeat measurements experiments indicated replicated method MultiAssayExperiment object supported class object colDataCols character, logical, numeric index colData columns included longFormat: -th assay SummarizedExperiment-like objects. vector input supported case SummarizedExperiment object(s) one assay (default 1L), renameColname: Either numeric character index indicating assay whose colnames renamed check.names (logical default TRUE) Column names output DataFrame checked syntactic validity made unique, necessary collapse (character default \"_\") single string delimiter output column names. wideFormat, experiments rownames (replicate samples present, colnames) seperated delimiter mode String indicating MultiAssayExperiment column-level metadata added SummarizedExperiment colData. verbose logical(1) Whether suppressMessages subsetting operations getWithColData (default FALSE) value renamePrimary: character vector length existing rownames(colData) use replacement, renameColname: CharacterList list matching lengths replace colnames(x) hitList named list List logical vectors indicate groupings assays patternList named list List atomic character vectors input grepl identifying groupings assays","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"See itemized list description section details.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"replicated function finds replicate measurements assay returns list LogicalLists. element single LogicalList corresponds biological primary unit sampleMap. small graphic one particular biological unit one assay, logical vector corresponds number measurements/samples assay: anyReplicated determines assays least one replicate. Note. methods available ExperimentList class due missing sampleMap structure (design). showReplicated returns list CharacterLists element corresponds biological primary units replicated assay element. values inner list colnames assay technical replicates. replicates function (noun) returns colnames sampleMap identified replicates. returns list CharacterLists assay present MultiAssayExperiment inner entry biological unit replicate observations assay. mergeReplicates function house-keeping method MultiAssayExperiment complete.cases returned. -assay operation averages replicate measurements (default) columns aligned row order colData. Users can provide function merging replicates simplify functional argument. Additional inputs ... sent 'simplify' function. mergeReplicates \"\" method consolidates duplicate measurements rectangular data structures, returns object class (endomorphic). ellipsis ... argument allows user provide additional arguments simplify functional argument. longFormat \"\" class method, works classes ExpressionSet SummarizedExperiment well matrix provide consistent long skinny DataFrame. hasRowRanges method identifies assays support rowRanges method return GRanges object.","code":">      replicated(MultiAssayExperiment)  (list str)       '-- $ AssayName  (LogicalList str)      '-- [[ \"Biological Unit\" ]]  Replicated if sum(...) > 1          '-- TRUE TRUE FALSE FALSE"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"mergereplicates","dir":"Reference","previous_headings":"","what":"mergeReplicates","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"mergeReplicates function makes use output replicated point duplicate measurements biological unit MultiAssayExperiment. function return MultiAssayExperiment merged replicates. Additional arguments can provided simplify argument via ellipsis (...). example, replicates \"TCGA-B\" \"TCGA-\" found assay, name first appearing replicate taken (.e., \"B\"). Note typical use case merging replicates occurs multiple measurements sample (within assay) can therefore averaged.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"longformat","dir":"Reference","previous_headings":"","what":"longFormat","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"'longFormat' method takes data ExperimentList MultiAssayExperiment returns uniform DataFrame. resulting DataFrame columns indicating primary, rowname, colname value. method can optionally include columns MultiAssayExperiment colData named colDataCols character vector argument. (MultiAssayExperiment method ). argument allows user specify assay value SummarizedExperiment assay function's argument.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"wideformat","dir":"Reference","previous_headings":"","what":"wideFormat","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"wideFormat function returns standardized wide DataFrame row represents biological unit colData. Depending data setup, biological units can patients, tumors, specimens, etc. Metadata columns generated based names produced wide format DataFrame. can accessed via mcols() function. See wideFormat section description colDataCols arguments.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"hasrowranges","dir":"Reference","previous_headings":"","what":"hasRowRanges","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"hasRowRanges method identifies assays associated ranged row data directly testing method object. result test must GRanges class object satisfy test.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"getwithcoldata","dir":"Reference","previous_headings":"","what":"getWithColData","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"getWithColData function allows user conveniently extract particular assay indicated index argument. also attempt provide colData along extracted object using colData<- replacement method possible. Typically, method available SummarizedExperiment RaggedExperiment classes. setting mode determines colData added. mode=\"append\", MultiAssayExperiment metadata appended onto SummarizedExperiment. fields duplicated name, values SummarizedExperiment retained, warning emitted values different.  mode=\"replace\", MultiAssayExperiment metadata replaces SummarizedExperiment, mode=\"none\", replacement appending performed.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"rename-","dir":"Reference","previous_headings":"","what":"rename*","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"renamePrimary function allows user conveniently change actual names primary biological units seen rownames(colData). renameColname allows user change names particular assay based index . can either single numeric character value. See colnames<- method renaming multiple colnames MultiAssayExperiment.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"splitassays","dir":"Reference","previous_headings":"","what":"splitAssays","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"splitAssays method separates columns assays based hitList input. hitList can generated using makeHitList helper function. use makeHitList helper, user input list patterns match column names assay. matches mutually exclusive avoid repetition columns across assays. See examples section.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A group of helper functions for manipulating and cleaning a MultiAssayExperiment — MultiAssayExperiment-helpers","text":"","code":"example(MultiAssayExperiment) #>  #> MltAsE> ## Run the example ExperimentList #> MltAsE> example(\"ExperimentList\") #>  #> ExprmL> ## Create an empty ExperimentList instance #> ExprmL> ExperimentList() #> ExperimentList class object of length 0: #>   #> ExprmL> ## Create array matrix and AnnotatedDataFrame to create an ExpressionSet class #> ExprmL> arraydat <- matrix(data = seq(101, length.out = 20), ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000294241\", \"ENST00000355076\", #> ExprmL+         \"ENST00000383706\",\"ENST00000234812\", \"ENST00000383323\"), #> ExprmL+         c(\"array1\", \"array2\", \"array3\", \"array4\") #> ExprmL+     )) #>  #> ExprmL> colDat <- data.frame(slope53 = rnorm(4), #> ExprmL+     row.names = c(\"array1\", \"array2\", \"array3\", \"array4\")) #>  #> ExprmL> ## SummarizedExperiment constructor #> ExprmL> exprdat <- SummarizedExperiment::SummarizedExperiment(arraydat, #> ExprmL+     colData = colDat) #>  #> ExprmL> ## Create a sample methylation dataset #> ExprmL> methyldat <- matrix(data = seq(1, length.out = 25), ncol = 5, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000355076\", \"ENST00000383706\", #> ExprmL+           \"ENST00000383323\", \"ENST00000234812\", \"ENST00000294241\"), #> ExprmL+         c(\"methyl1\", \"methyl2\", \"methyl3\", #> ExprmL+           \"methyl4\", \"methyl5\") #> ExprmL+     )) #>  #> ExprmL> ## Create a sample RNASeqGene dataset #> ExprmL> rnadat <- matrix( #> ExprmL+     data = sample(c(46851, 5, 19, 13, 2197, 507, #> ExprmL+         84318, 126, 17, 21, 23979, 614), size = 20, replace = TRUE), #> ExprmL+     ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"XIST\", \"RPS4Y1\", \"KDM5D\", \"ENST00000383323\", \"ENST00000234812\"), #> ExprmL+         c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\") #> ExprmL+     )) #>  #> ExprmL> ## Create a mock RangedSummarizedExperiment from a data.frame #> ExprmL> rangedat <- data.frame(chr=\"chr2\", start = 11:15, end = 12:16, #> ExprmL+     strand = c(\"+\", \"-\", \"+\", \"*\", \".\"), #> ExprmL+     samp0 = c(0,0,1,1,1), samp1 = c(1,0,1,0,1), samp2 = c(0,1,0,1,0), #> ExprmL+     row.names = c(paste0(\"ENST\", \"00000\", 135411:135414), \"ENST00000383323\")) #>  #> ExprmL> rangeSE <- SummarizedExperiment::makeSummarizedExperimentFromDataFrame(rangedat) #>  #> ExprmL> ## Combine to a named list and call the ExperimentList constructor function #> ExprmL> assayList <- list(Affy = exprdat, Methyl450k = methyldat, RNASeqGene = rnadat, #> ExprmL+                 GISTIC = rangeSE) #>  #> ExprmL> ## Use the ExperimentList constructor #> ExprmL> ExpList <- ExperimentList(assayList) #>  #> MltAsE> ## Create sample maps for each experiment #> MltAsE> exprmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"array1\", \"array2\", \"array3\", \"array4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> methylmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"methyl1\", \"methyl2\", \"methyl3\", \"methyl4\", \"methyl5\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> rnamap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\"), #> MltAsE+     colname = c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> gistmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Bob\", \"Jill\"), #> MltAsE+     colname = c(\"samp0\", \"samp1\", \"samp2\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> ## Combine as a named list and convert to a DataFrame #> MltAsE> maplist <- list(Affy = exprmap, Methyl450k = methylmap, #> MltAsE+     RNASeqGene = rnamap, GISTIC = gistmap) #>  #> MltAsE> ## Create a sampleMap #> MltAsE> sampMap <- listToMap(maplist) #>  #> MltAsE> ## Create an example phenotype data #> MltAsE> colDat <- data.frame(sex = c(\"M\", \"F\", \"M\", \"F\"), age = 38:41, #> MltAsE+     row.names = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\")) #>  #> MltAsE> ## Create a MultiAssayExperiment instance #> MltAsE> mae <- MultiAssayExperiment(experiments = ExpList, colData = colDat, #> MltAsE+     sampleMap = sampMap)  complete.cases(mae) #> [1]  TRUE  TRUE  TRUE FALSE  isEmpty(MultiAssayExperiment()) #> [1] TRUE   ## renaming biological units (primary)  mae2 <- renamePrimary(mae, paste0(\"pt\", 1:4)) colData(mae2) #> DataFrame with 4 rows and 2 columns #>             sex       age #>     <character> <integer> #> pt1           M        38 #> pt2           F        39 #> pt3           M        40 #> pt4           F        41 sampleMap(mae2) #> DataFrame with 16 rows and 3 columns #>          assay     primary     colname #>       <factor> <character> <character> #> 1   Affy               pt1      array1 #> 2   Affy               pt2      array2 #> 3   Affy               pt4      array3 #> 4   Affy               pt3      array4 #> 5   Methyl450k         pt1     methyl1 #> ...        ...         ...         ... #> 12  RNASeqGene         pt3  samparray3 #> 13  RNASeqGene         pt4  samparray4 #> 14  GISTIC             pt1       samp0 #> 15  GISTIC             pt3       samp1 #> 16  GISTIC             pt2       samp2   ## renaming observational units (colname)  mae2 <- renameColname(mae, i = \"Affy\", paste0(\"ARRAY\", 1:4)) colnames(mae2) #> CharacterList of length 4 #> [[\"Affy\"]] ARRAY1 ARRAY2 ARRAY3 ARRAY4 #> [[\"Methyl450k\"]] methyl1 methyl2 methyl3 methyl4 methyl5 #> [[\"RNASeqGene\"]] samparray1 samparray2 samparray3 samparray4 #> [[\"GISTIC\"]] samp0 samp1 samp2 sampleMap(mae2) #> DataFrame with 16 rows and 3 columns #>          assay     primary     colname #>       <factor> <character> <character> #> 1   Affy              Jack      ARRAY1 #> 2   Affy              Jill      ARRAY2 #> 3   Affy           Barbara      ARRAY3 #> 4   Affy               Bob      ARRAY4 #> 5   Methyl450k        Jack     methyl1 #> ...        ...         ...         ... #> 12  RNASeqGene         Bob  samparray3 #> 13  RNASeqGene     Barbara  samparray4 #> 14  GISTIC            Jack       samp0 #> 15  GISTIC             Bob       samp1 #> 16  GISTIC            Jill       samp2    patts <- list(     normals = \"TCGA-[A-Z0-9]{2}-[A-Z0-9]{4}-11\",     tumors = \"TCGA-[A-Z0-9]{2}-[A-Z0-9]{4}-01\" )  data(\"miniACC\")  hits <- makeHitList(miniACC, patts)  ## only turmors present splitAssays(miniACC, hits) #> A MultiAssayExperiment object of 5 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 5: #>  [1] tumors_RNASeq2GeneNorm: SummarizedExperiment with 198 rows and 79 columns #>  [2] tumors_gistict: SummarizedExperiment with 198 rows and 90 columns #>  [3] tumors_RPPAArray: SummarizedExperiment with 33 rows and 46 columns #>  [4] tumors_Mutations: matrix with 97 rows and 90 columns #>  [5] tumors_miRNASeqGene: SummarizedExperiment with 471 rows and 80 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-methods.html","id":null,"dir":"Reference","previous_headings":"","what":"Accessing and modifying information in MultiAssayExperiment — MultiAssayExperiment-methods","title":"Accessing and modifying information in MultiAssayExperiment — MultiAssayExperiment-methods","text":"set accessor setter generic functions extract either sampleMap, ExperimentList, colData, metadata slots MultiAssayExperiment object","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-methods.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Accessing and modifying information in MultiAssayExperiment — MultiAssayExperiment-methods","text":"","code":"# S4 method for class 'MultiAssayExperiment' sampleMap(x)  # S4 method for class 'MultiAssayExperiment' experiments(x)  # S4 method for class 'MultiAssayExperiment' colData(x, ...)  # S4 method for class 'MultiAssayExperiment' drops(x)  # S4 method for class 'MultiAssayExperiment,DataFrame' sampleMap(object) <- value  # S4 method for class 'MultiAssayExperiment,ANY' sampleMap(object) <- value  drops(x, ...) <- value  # S4 method for class 'MultiAssayExperiment,ExperimentList' experiments(object) <- value  # S4 method for class 'MultiAssayExperiment,List' experiments(object) <- value  # S4 method for class 'MultiAssayExperiment,DataFrame' colData(x) <- value  # S4 method for class 'MultiAssayExperiment,ANY' colData(x) <- value  # S4 method for class 'MultiAssayExperiment' drops(x, ...) <- value  # S4 method for class 'MultiAssayExperiment' x$name <- value  # S4 method for class 'MultiAssayExperiment' names(x) <- value  # S4 method for class 'MultiAssayExperiment,List' colnames(x) <- value  # S4 method for class 'MultiAssayExperiment,list' colnames(x) <- value  # S4 method for class 'MultiAssayExperiment' x$name  # S4 method for class 'MultiAssayExperiment' metadata(x, ...)  # S4 method for class 'MultiAssayExperiment' metadata(x, ...) <- value"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-methods.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Accessing and modifying information in MultiAssayExperiment — MultiAssayExperiment-methods","text":"... Argument use object, x MultiAssayExperiment object value See details. name column colData","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-methods.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Accessing and modifying information in MultiAssayExperiment — MultiAssayExperiment-methods","text":"Accessors: Either sampleMap, ExperimentList, DataFrame object Setters: MultiAssayExperiment object","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-methods.html","id":"accessors","dir":"Reference","previous_headings":"","what":"Accessors","title":"Accessing and modifying information in MultiAssayExperiment — MultiAssayExperiment-methods","text":"Eponymous names accessing MultiAssayExperiment slots exception ExperimentList accessor named experiments. colData: Access colData slot sampleMap: Access sampleMap slot experiments: Access ExperimentList slot [[: Access ExperimentList slot $: Access column colData drops: Get vector dropped ExperimentList names","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-methods.html","id":"setters","dir":"Reference","previous_headings":"","what":"Setters","title":"Accessing and modifying information in MultiAssayExperiment — MultiAssayExperiment-methods","text":"Setter method values (.e., 'function(x) <- value'): experiments<-: ExperimentList object containing experiment data supported classes sampleMap<-: DataFrame object relating samples biological units assays colData<-: DataFrame object describing biological units metadata<-: list object metadata [[<-: Equivalent experiments<- setter method convenience $<-: vector replace indicated column colData drops<-: Trace ExperimentList names removed","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-methods.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Accessing and modifying information in MultiAssayExperiment — MultiAssayExperiment-methods","text":"","code":"## Load example MultiAssayExperiment example(MultiAssayExperiment) #>  #> MltAsE> ## Run the example ExperimentList #> MltAsE> example(\"ExperimentList\") #>  #> ExprmL> ## Create an empty ExperimentList instance #> ExprmL> ExperimentList() #> ExperimentList class object of length 0: #>   #> ExprmL> ## Create array matrix and AnnotatedDataFrame to create an ExpressionSet class #> ExprmL> arraydat <- matrix(data = seq(101, length.out = 20), ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000294241\", \"ENST00000355076\", #> ExprmL+         \"ENST00000383706\",\"ENST00000234812\", \"ENST00000383323\"), #> ExprmL+         c(\"array1\", \"array2\", \"array3\", \"array4\") #> ExprmL+     )) #>  #> ExprmL> colDat <- data.frame(slope53 = rnorm(4), #> ExprmL+     row.names = c(\"array1\", \"array2\", \"array3\", \"array4\")) #>  #> ExprmL> ## SummarizedExperiment constructor #> ExprmL> exprdat <- SummarizedExperiment::SummarizedExperiment(arraydat, #> ExprmL+     colData = colDat) #>  #> ExprmL> ## Create a sample methylation dataset #> ExprmL> methyldat <- matrix(data = seq(1, length.out = 25), ncol = 5, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000355076\", \"ENST00000383706\", #> ExprmL+           \"ENST00000383323\", \"ENST00000234812\", \"ENST00000294241\"), #> ExprmL+         c(\"methyl1\", \"methyl2\", \"methyl3\", #> ExprmL+           \"methyl4\", \"methyl5\") #> ExprmL+     )) #>  #> ExprmL> ## Create a sample RNASeqGene dataset #> ExprmL> rnadat <- matrix( #> ExprmL+     data = sample(c(46851, 5, 19, 13, 2197, 507, #> ExprmL+         84318, 126, 17, 21, 23979, 614), size = 20, replace = TRUE), #> ExprmL+     ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"XIST\", \"RPS4Y1\", \"KDM5D\", \"ENST00000383323\", \"ENST00000234812\"), #> ExprmL+         c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\") #> ExprmL+     )) #>  #> ExprmL> ## Create a mock RangedSummarizedExperiment from a data.frame #> ExprmL> rangedat <- data.frame(chr=\"chr2\", start = 11:15, end = 12:16, #> ExprmL+     strand = c(\"+\", \"-\", \"+\", \"*\", \".\"), #> ExprmL+     samp0 = c(0,0,1,1,1), samp1 = c(1,0,1,0,1), samp2 = c(0,1,0,1,0), #> ExprmL+     row.names = c(paste0(\"ENST\", \"00000\", 135411:135414), \"ENST00000383323\")) #>  #> ExprmL> rangeSE <- SummarizedExperiment::makeSummarizedExperimentFromDataFrame(rangedat) #>  #> ExprmL> ## Combine to a named list and call the ExperimentList constructor function #> ExprmL> assayList <- list(Affy = exprdat, Methyl450k = methyldat, RNASeqGene = rnadat, #> ExprmL+                 GISTIC = rangeSE) #>  #> ExprmL> ## Use the ExperimentList constructor #> ExprmL> ExpList <- ExperimentList(assayList) #>  #> MltAsE> ## Create sample maps for each experiment #> MltAsE> exprmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"array1\", \"array2\", \"array3\", \"array4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> methylmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"methyl1\", \"methyl2\", \"methyl3\", \"methyl4\", \"methyl5\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> rnamap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\"), #> MltAsE+     colname = c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> gistmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Bob\", \"Jill\"), #> MltAsE+     colname = c(\"samp0\", \"samp1\", \"samp2\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> ## Combine as a named list and convert to a DataFrame #> MltAsE> maplist <- list(Affy = exprmap, Methyl450k = methylmap, #> MltAsE+     RNASeqGene = rnamap, GISTIC = gistmap) #>  #> MltAsE> ## Create a sampleMap #> MltAsE> sampMap <- listToMap(maplist) #>  #> MltAsE> ## Create an example phenotype data #> MltAsE> colDat <- data.frame(sex = c(\"M\", \"F\", \"M\", \"F\"), age = 38:41, #> MltAsE+     row.names = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\")) #>  #> MltAsE> ## Create a MultiAssayExperiment instance #> MltAsE> mae <- MultiAssayExperiment(experiments = ExpList, colData = colDat, #> MltAsE+     sampleMap = sampMap)  ## Access the sampleMap sampleMap(mae) #> DataFrame with 16 rows and 3 columns #>          assay     primary     colname #>       <factor> <character> <character> #> 1   Affy              Jack      array1 #> 2   Affy              Jill      array2 #> 3   Affy           Barbara      array3 #> 4   Affy               Bob      array4 #> 5   Methyl450k        Jack     methyl1 #> ...        ...         ...         ... #> 12  RNASeqGene         Bob  samparray3 #> 13  RNASeqGene     Barbara  samparray4 #> 14  GISTIC            Jack       samp0 #> 15  GISTIC             Bob       samp1 #> 16  GISTIC            Jill       samp2  ## Replacement method for a MultiAssayExperiment sampleMap sampleMap(mae) <- S4Vectors::DataFrame() #> harmonizing input: #>   removing 4 colData rownames not in sampleMap 'primary'  ## Access the ExperimentList experiments(mae) #> ExperimentList class object of length 0: #>    ## Replace with an empty ExperimentList experiments(mae) <- ExperimentList()  ## Access the metadata metadata(mae) #> list()  ## Replace metadata with a list metadata(mae) <- list(runDate =     format(Sys.time(), \"%B %d, %Y\"))  ## Access the colData colData(mae) #> DataFrame with 0 rows and 2 columns  ## Access a column in colData mae$age #> integer(0)  ## Replace a column in colData mae$age <- mae$age + 1"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-package.html","id":null,"dir":"Reference","previous_headings":"","what":"MultiAssayExperiment: Build an integrative multi-assay container — MultiAssayExperiment-package","title":"MultiAssayExperiment: Build an integrative multi-assay container — MultiAssayExperiment-package","text":"MultiAssayExperiment allows manipulation related multiassay datasets partially overlapping samples, associated metadata level entire study, level \"biological unit\". biological unit may patient, plant, yeast strain, etc.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"MultiAssayExperiment: Build an integrative multi-assay container — MultiAssayExperiment-package","text":"package hierarchy information: study experiments samples","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"MultiAssayExperiment: Build an integrative multi-assay container — MultiAssayExperiment-package","text":"Maintainer: Marcel Ramos marcel.ramos@roswellpark.org (ORCID) Authors: Martin Morgan [contributor] Vincent J Carey [contributor] Levi Waldron lwaldron.research@gmail.com contributors: Lori Shepherd [contributor] Hervé Pagès [contributor] MultiAssay SIG biocmultiassay@googlegroups.com [contributor]","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct an integrative representation of multi-omic data with MultiAssayExperiment — MultiAssayExperiment","title":"Construct an integrative representation of multi-omic data with MultiAssayExperiment — MultiAssayExperiment","text":"constructor function MultiAssayExperiment combines multiple data elements different hierarchies data (study, experiments, samples). can create instances neither sampleMap colData set provided. Please see MultiAssayExperiment API documentation information.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct an integrative representation of multi-omic data with MultiAssayExperiment — MultiAssayExperiment","text":"","code":"MultiAssayExperiment(   experiments = ExperimentList(),   colData = S4Vectors::DataFrame(),   sampleMap = S4Vectors::DataFrame(assay = factor(), primary = character(), colname =     character()),   metadata = list(),   drops = list() )"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct an integrative representation of multi-omic data with MultiAssayExperiment — MultiAssayExperiment","text":"experiments list ExperimentList combined experiments colData DataFrame data.frame characteristics biological units sampleMap DataFrame data.frame assay names, sample identifiers, colname samples metadata optional argument \"\" class (usually list) content describing experiments drops list unmatched information (included subsetting)","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct an integrative representation of multi-omic data with MultiAssayExperiment — MultiAssayExperiment","text":"MultiAssayExperiment object can store experiment phenotype data","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment.html","id":"coldata","dir":"Reference","previous_headings":"","what":"colData","title":"Construct an integrative representation of multi-omic data with MultiAssayExperiment — MultiAssayExperiment","text":"colData input can either DataFrame data.frame subsequent coercion DataFrame. rownames colData must match colnames experiments sampleMap provided.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment.html","id":"experiments","dir":"Reference","previous_headings":"","what":"experiments","title":"Construct an integrative representation of multi-omic data with MultiAssayExperiment — MultiAssayExperiment","text":"experiments input can class SimpleList list. input becomes ExperimentList. element input list List must named, rectangular two dimensions, dimnames.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment.html","id":"samplemap","dir":"Reference","previous_headings":"","what":"sampleMap","title":"Construct an integrative representation of multi-omic data with MultiAssayExperiment — MultiAssayExperiment","text":"sampleMap can either input DataFrame data.frame eventual coercion DataFrame. sampleMap relates biological units biological measurements within assay. row sampleMap single link. standard column names sampleMap \"assay\", \"primary\", \"colname\".  Note \"assay\" column factor corresponding names experiment ExperimentList. case names match sampleMap experiments, documented experiments sampleMap take precedence experiments dropped harmonization procedure. constructor function generate sampleMap case provided method may 'safer' alternative creating MultiAssayExperiment (long rownames identical colData, provided).  empty sampleMap may produce empty experiments levels \"assay\" factor sampleMap match names ExperimentList.","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperiment.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct an integrative representation of multi-omic data with MultiAssayExperiment — MultiAssayExperiment","text":"","code":"## Run the example ExperimentList example(\"ExperimentList\") #>  #> ExprmL> ## Create an empty ExperimentList instance #> ExprmL> ExperimentList() #> ExperimentList class object of length 0: #>   #> ExprmL> ## Create array matrix and AnnotatedDataFrame to create an ExpressionSet class #> ExprmL> arraydat <- matrix(data = seq(101, length.out = 20), ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000294241\", \"ENST00000355076\", #> ExprmL+         \"ENST00000383706\",\"ENST00000234812\", \"ENST00000383323\"), #> ExprmL+         c(\"array1\", \"array2\", \"array3\", \"array4\") #> ExprmL+     )) #>  #> ExprmL> colDat <- data.frame(slope53 = rnorm(4), #> ExprmL+     row.names = c(\"array1\", \"array2\", \"array3\", \"array4\")) #>  #> ExprmL> ## SummarizedExperiment constructor #> ExprmL> exprdat <- SummarizedExperiment::SummarizedExperiment(arraydat, #> ExprmL+     colData = colDat) #>  #> ExprmL> ## Create a sample methylation dataset #> ExprmL> methyldat <- matrix(data = seq(1, length.out = 25), ncol = 5, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000355076\", \"ENST00000383706\", #> ExprmL+           \"ENST00000383323\", \"ENST00000234812\", \"ENST00000294241\"), #> ExprmL+         c(\"methyl1\", \"methyl2\", \"methyl3\", #> ExprmL+           \"methyl4\", \"methyl5\") #> ExprmL+     )) #>  #> ExprmL> ## Create a sample RNASeqGene dataset #> ExprmL> rnadat <- matrix( #> ExprmL+     data = sample(c(46851, 5, 19, 13, 2197, 507, #> ExprmL+         84318, 126, 17, 21, 23979, 614), size = 20, replace = TRUE), #> ExprmL+     ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"XIST\", \"RPS4Y1\", \"KDM5D\", \"ENST00000383323\", \"ENST00000234812\"), #> ExprmL+         c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\") #> ExprmL+     )) #>  #> ExprmL> ## Create a mock RangedSummarizedExperiment from a data.frame #> ExprmL> rangedat <- data.frame(chr=\"chr2\", start = 11:15, end = 12:16, #> ExprmL+     strand = c(\"+\", \"-\", \"+\", \"*\", \".\"), #> ExprmL+     samp0 = c(0,0,1,1,1), samp1 = c(1,0,1,0,1), samp2 = c(0,1,0,1,0), #> ExprmL+     row.names = c(paste0(\"ENST\", \"00000\", 135411:135414), \"ENST00000383323\")) #>  #> ExprmL> rangeSE <- SummarizedExperiment::makeSummarizedExperimentFromDataFrame(rangedat) #>  #> ExprmL> ## Combine to a named list and call the ExperimentList constructor function #> ExprmL> assayList <- list(Affy = exprdat, Methyl450k = methyldat, RNASeqGene = rnadat, #> ExprmL+                 GISTIC = rangeSE) #>  #> ExprmL> ## Use the ExperimentList constructor #> ExprmL> ExpList <- ExperimentList(assayList)  ## Create sample maps for each experiment exprmap <- data.frame(     primary = c(\"Jack\", \"Jill\", \"Barbara\", \"Bob\"),     colname = c(\"array1\", \"array2\", \"array3\", \"array4\"),     stringsAsFactors = FALSE)  methylmap <- data.frame(     primary = c(\"Jack\", \"Jack\", \"Jill\", \"Barbara\", \"Bob\"),     colname = c(\"methyl1\", \"methyl2\", \"methyl3\", \"methyl4\", \"methyl5\"),     stringsAsFactors = FALSE)  rnamap <- data.frame(     primary = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\"),     colname = c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\"),     stringsAsFactors = FALSE)  gistmap <- data.frame(     primary = c(\"Jack\", \"Bob\", \"Jill\"),     colname = c(\"samp0\", \"samp1\", \"samp2\"),     stringsAsFactors = FALSE)  ## Combine as a named list and convert to a DataFrame maplist <- list(Affy = exprmap, Methyl450k = methylmap,     RNASeqGene = rnamap, GISTIC = gistmap)  ## Create a sampleMap sampMap <- listToMap(maplist) ## Create an example phenotype data colDat <- data.frame(sex = c(\"M\", \"F\", \"M\", \"F\"), age = 38:41,     row.names = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\"))  ## Create a MultiAssayExperiment instance mae <- MultiAssayExperiment(experiments = ExpList, colData = colDat,     sampleMap = sampMap)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperimentToMAF.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert MultiAssayExperiment to MAF class — MultiAssayExperimentToMAF","title":"Convert MultiAssayExperiment to MAF class — MultiAssayExperimentToMAF","text":"Take MultiAssayExperiment object specific mutation assays convert maftools representation. names provided via synAssay nonSynAssay must match exactly assays MultiAssayExperiment.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperimentToMAF.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert MultiAssayExperiment to MAF class — MultiAssayExperimentToMAF","text":"","code":"MultiAssayExperimentToMAF(x, synAssay = \"maf_syn\", nonSynAssay = \"maf_nonSyn\")"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/MultiAssayExperimentToMAF.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert MultiAssayExperiment to MAF class — MultiAssayExperimentToMAF","text":"x MultiAssayExperiment object synAssay character(1) name ExperimentList element MultiAssayExperiment identifies synonymous variant classifications. nonSynAssay character(1) name ExperimentList element MultiAssayExperiment identifies non-synonymous variant classifications.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/hasAssay.html","id":null,"dir":"Reference","previous_headings":"","what":"Checking assay method for any class — hasAssay","title":"Checking assay method for any class — hasAssay","text":"hasAssay function intended developers like include new classes MultiAssayExperiment instance. checks methods tables assay function specified class argument.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/hasAssay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Checking assay method for any class — hasAssay","text":"","code":"hasAssay(object)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/hasAssay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Checking assay method for any class — hasAssay","text":"object MultiAssayExperiment named list object instance","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/hasAssay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Checking assay method for any class — hasAssay","text":"logical value indicating method availability","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/hasAssay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Checking assay method for any class — hasAssay","text":"","code":"lst <- structure(list(), .Names=character()) hasAssay(lst) #> [1] TRUE"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/mapToList.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert map from data.frame or DataFrame to list and vice versa — listToMap","title":"Convert map from data.frame or DataFrame to list and vice versa — listToMap","text":"mapToList function provides convenient way reordering data.frame list. listToMap function opposite taking list converting DataFrame.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/mapToList.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert map from data.frame or DataFrame to list and vice versa — listToMap","text":"","code":"listToMap(listmap, fill = TRUE)  mapToList(dfmap, assayCol = \"assay\")"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/mapToList.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert map from data.frame or DataFrame to list and vice versa — listToMap","text":"listmap named list object containing DataFrames \"primary\" \"colname\" columns fill logical(1) Whether fill map empty DataFrame empty elements present input list dfmap data.frame DataFrame object identifiers first column assayCol character vector length one indicating assay names column","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/mapToList.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert map from data.frame or DataFrame to list and vice versa — listToMap","text":"DataFrame class object names list object DataFrames assay","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/mapToList.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Convert map from data.frame or DataFrame to list and vice versa — listToMap","text":"listToMap(): inverse listToMap operation","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/mapToList.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert map from data.frame or DataFrame to list and vice versa — listToMap","text":"","code":"example(\"MultiAssayExperiment\") #>  #> MltAsE> ## Run the example ExperimentList #> MltAsE> example(\"ExperimentList\") #>  #> ExprmL> ## Create an empty ExperimentList instance #> ExprmL> ExperimentList() #> ExperimentList class object of length 0: #>   #> ExprmL> ## Create array matrix and AnnotatedDataFrame to create an ExpressionSet class #> ExprmL> arraydat <- matrix(data = seq(101, length.out = 20), ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000294241\", \"ENST00000355076\", #> ExprmL+         \"ENST00000383706\",\"ENST00000234812\", \"ENST00000383323\"), #> ExprmL+         c(\"array1\", \"array2\", \"array3\", \"array4\") #> ExprmL+     )) #>  #> ExprmL> colDat <- data.frame(slope53 = rnorm(4), #> ExprmL+     row.names = c(\"array1\", \"array2\", \"array3\", \"array4\")) #>  #> ExprmL> ## SummarizedExperiment constructor #> ExprmL> exprdat <- SummarizedExperiment::SummarizedExperiment(arraydat, #> ExprmL+     colData = colDat) #>  #> ExprmL> ## Create a sample methylation dataset #> ExprmL> methyldat <- matrix(data = seq(1, length.out = 25), ncol = 5, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000355076\", \"ENST00000383706\", #> ExprmL+           \"ENST00000383323\", \"ENST00000234812\", \"ENST00000294241\"), #> ExprmL+         c(\"methyl1\", \"methyl2\", \"methyl3\", #> ExprmL+           \"methyl4\", \"methyl5\") #> ExprmL+     )) #>  #> ExprmL> ## Create a sample RNASeqGene dataset #> ExprmL> rnadat <- matrix( #> ExprmL+     data = sample(c(46851, 5, 19, 13, 2197, 507, #> ExprmL+         84318, 126, 17, 21, 23979, 614), size = 20, replace = TRUE), #> ExprmL+     ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"XIST\", \"RPS4Y1\", \"KDM5D\", \"ENST00000383323\", \"ENST00000234812\"), #> ExprmL+         c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\") #> ExprmL+     )) #>  #> ExprmL> ## Create a mock RangedSummarizedExperiment from a data.frame #> ExprmL> rangedat <- data.frame(chr=\"chr2\", start = 11:15, end = 12:16, #> ExprmL+     strand = c(\"+\", \"-\", \"+\", \"*\", \".\"), #> ExprmL+     samp0 = c(0,0,1,1,1), samp1 = c(1,0,1,0,1), samp2 = c(0,1,0,1,0), #> ExprmL+     row.names = c(paste0(\"ENST\", \"00000\", 135411:135414), \"ENST00000383323\")) #>  #> ExprmL> rangeSE <- SummarizedExperiment::makeSummarizedExperimentFromDataFrame(rangedat) #>  #> ExprmL> ## Combine to a named list and call the ExperimentList constructor function #> ExprmL> assayList <- list(Affy = exprdat, Methyl450k = methyldat, RNASeqGene = rnadat, #> ExprmL+                 GISTIC = rangeSE) #>  #> ExprmL> ## Use the ExperimentList constructor #> ExprmL> ExpList <- ExperimentList(assayList) #>  #> MltAsE> ## Create sample maps for each experiment #> MltAsE> exprmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"array1\", \"array2\", \"array3\", \"array4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> methylmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"methyl1\", \"methyl2\", \"methyl3\", \"methyl4\", \"methyl5\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> rnamap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\"), #> MltAsE+     colname = c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> gistmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Bob\", \"Jill\"), #> MltAsE+     colname = c(\"samp0\", \"samp1\", \"samp2\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> ## Combine as a named list and convert to a DataFrame #> MltAsE> maplist <- list(Affy = exprmap, Methyl450k = methylmap, #> MltAsE+     RNASeqGene = rnamap, GISTIC = gistmap) #>  #> MltAsE> ## Create a sampleMap #> MltAsE> sampMap <- listToMap(maplist) #>  #> MltAsE> ## Create an example phenotype data #> MltAsE> colDat <- data.frame(sex = c(\"M\", \"F\", \"M\", \"F\"), age = 38:41, #> MltAsE+     row.names = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\")) #>  #> MltAsE> ## Create a MultiAssayExperiment instance #> MltAsE> mae <- MultiAssayExperiment(experiments = ExpList, colData = colDat, #> MltAsE+     sampleMap = sampMap)  ## Create a sampleMap from a list using the listToMap function sampMap <- listToMap(maplist)  ## The inverse operation is also available maplist <- mapToList(sampMap)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/miniACC.html","id":null,"dir":"Reference","previous_headings":"","what":"Adrenocortical Carcinoma (ACC) MultiAssayExperiment — miniACC","title":"Adrenocortical Carcinoma (ACC) MultiAssayExperiment — miniACC","text":"MultiAssayExperiment object providing reduced version TCGA ACC dataset 92 patients. RNA-seq, copy number, somatic mutations included genes whose proteins included reverse-phase protein array. MicroRNA-seq dataset also included, infrequently expressed microRNA removed. Clinical, pathological, subtype information provided colData(miniACC), additional details provided metadata(miniACC).","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/miniACC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Adrenocortical Carcinoma (ACC) MultiAssayExperiment — miniACC","text":"","code":"data(\"miniACC\")"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/miniACC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Adrenocortical Carcinoma (ACC) MultiAssayExperiment — miniACC","text":"MultiAssayExperiment 5 experiments, providing: RNASeq2GeneNorm RNA-seq count data: ExpressionSet 198 rows 79 columns gistict Reccurent copy number lesions identified GISTIC2: SummarizedExperiment 198 rows 90 columns RPPAArray Reverse Phase Protein Array: ExpressionSet 33 rows 46 columns. Rows indexed genes, protein annotations available featureData(miniACC[[\"RPPAArray\"]]). source annotations noted abstract(miniACC[[\"RPPAArray\"]]) Mutations Somatic mutations: matrix 223 rows 90 columns. 1 kind non-silent mutation, zero silent (synonymous) mutation. miRNASeqGene microRNA sequencing: ExpressionSet 471 rows 80 columns. Rows least 5 counts least 5 samples removed.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/miniACC.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Adrenocortical Carcinoma (ACC) MultiAssayExperiment — miniACC","text":"https://github.com/waldronlab/multiassayexperiment-tcga","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/miniACC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Adrenocortical Carcinoma (ACC) MultiAssayExperiment — miniACC","text":"Zheng S et al.: Comprehensive Pan-Genomic Characterization Adrenocortical Carcinoma. Cancer Cell 2016, 29:723-736.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/miniACC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Adrenocortical Carcinoma (ACC) MultiAssayExperiment — miniACC","text":"Levi Waldron lwaldron.research@gmail.com","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/miniACC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Adrenocortical Carcinoma (ACC) MultiAssayExperiment — miniACC","text":"","code":"data(\"miniACC\") metadata(miniACC) #> $title #> [1] \"Comprehensive Pan-Genomic Characterization of Adrenocortical Carcinoma\" #>  #> $PMID #> [1] \"27165744\" #>  #> $sourceURL #> [1] \"http://s3.amazonaws.com/multiassayexperiments/accMAEO.rds\" #>  #> $RPPAfeatureDataURL #> [1] \"http://genomeportal.stanford.edu/pan-tcga/show_target_selection_file?filename=Allprotein.txt\" #>  #> $colDataExtrasURL #> [1] \"http://www.cell.com/cms/attachment/2062093088/2063584534/mmc3.xlsx\" #>  colnames(colData(miniACC)) #>  [1] \"patientID\"                            #>  [2] \"years_to_birth\"                       #>  [3] \"vital_status\"                         #>  [4] \"days_to_death\"                        #>  [5] \"days_to_last_followup\"                #>  [6] \"tumor_tissue_site\"                    #>  [7] \"pathologic_stage\"                     #>  [8] \"pathology_T_stage\"                    #>  [9] \"pathology_N_stage\"                    #> [10] \"gender\"                               #> [11] \"date_of_initial_pathologic_diagnosis\" #> [12] \"radiation_therapy\"                    #> [13] \"histological_type\"                    #> [14] \"residual_tumor\"                       #> [15] \"number_of_lymph_nodes\"                #> [16] \"race\"                                 #> [17] \"ethnicity\"                            #> [18] \"Histology\"                            #> [19] \"C1A.C1B\"                              #> [20] \"mRNA_K4\"                              #> [21] \"MethyLevel\"                           #> [22] \"miRNA.cluster\"                        #> [23] \"SCNA.cluster\"                         #> [24] \"protein.cluster\"                      #> [25] \"COC\"                                  #> [26] \"OncoSign\"                             #> [27] \"purity\"                               #> [28] \"ploidy\"                               #> [29] \"genome_doublings\"                     #> [30] \"ADS\"                                  table(miniACC$vital_status) #>  #>  0  1  #> 58 34  longFormat(     miniACC[\"MAPK3\", , ],     colDataCols = c(\"vital_status\", \"days_to_death\") ) #> harmonizing input: #>   removing 216 sampleMap rows not in names(experiments) #> DataFrame with 169 rows and 7 columns #>               assay      primary     rowname                      colname #>         <character>  <character> <character>                     <factor> #> 1   RNASeq2GeneNorm TCGA-OR-A5J1       MAPK3 TCGA-OR-A5J1-01A-11R-A29S-07 #> 2   RNASeq2GeneNorm TCGA-OR-A5J2       MAPK3 TCGA-OR-A5J2-01A-11R-A29S-07 #> 3   RNASeq2GeneNorm TCGA-OR-A5J3       MAPK3 TCGA-OR-A5J3-01A-11R-A29S-07 #> 4   RNASeq2GeneNorm TCGA-OR-A5J5       MAPK3 TCGA-OR-A5J5-01A-11R-A29S-07 #> 5   RNASeq2GeneNorm TCGA-OR-A5J6       MAPK3 TCGA-OR-A5J6-01A-31R-A29S-07 #> ...             ...          ...         ...                          ... #> 165         gistict TCGA-PA-A5YG       MAPK3 TCGA-PA-A5YG-01A-11D-A29H-01 #> 166         gistict TCGA-PK-A5H9       MAPK3 TCGA-PK-A5H9-01A-11D-A29H-01 #> 167         gistict TCGA-PK-A5HA       MAPK3 TCGA-PK-A5HA-01A-11D-A29H-01 #> 168         gistict TCGA-PK-A5HB       MAPK3 TCGA-PK-A5HB-01A-11D-A29H-01 #> 169         gistict TCGA-PK-A5HC       MAPK3 TCGA-PK-A5HC-01A-11D-A309-01 #>         value vital_status days_to_death #>     <numeric>    <integer>     <integer> #> 1     946.681            1          1355 #> 2    1699.382            1          1677 #> 3    2347.243            0            NA #> 4    1299.156            1           365 #> 5    2543.424            0            NA #> ...       ...          ...           ... #> 165         1            0            NA #> 166         0            0            NA #> 167         0            0            NA #> 168         0            0            NA #> 169         1            0            NA  wideFormat(     miniACC[\"MAPK3\", , ],     colDataCols = c(\"vital_status\", \"days_to_death\") ) #> harmonizing input: #>   removing 216 sampleMap rows not in names(experiments) #> DataFrame with 92 rows and 5 columns #>          primary vital_status days_to_death RNASeq2GeneNorm_MAPK3 gistict_MAPK3 #>      <character>    <integer>     <integer>             <numeric>     <numeric> #> 1   TCGA-OR-A5J1            1          1355               946.681             0 #> 2   TCGA-OR-A5J2            1          1677              1699.382             0 #> 3   TCGA-OR-A5J3            0            NA              2347.243             1 #> 4   TCGA-OR-A5J4            1           423                    NA             0 #> 5   TCGA-OR-A5J5            1           365              1299.156             1 #> ...          ...          ...           ...                   ...           ... #> 88  TCGA-PK-A5H9            0            NA               1013.47             0 #> 89  TCGA-PK-A5HA            0            NA               2446.12             0 #> 90  TCGA-PK-A5HB            0            NA               1463.31             0 #> 91  TCGA-PK-A5HC            0            NA                    NA             1 #> 92  TCGA-P6-A5OG            1           383               1310.88            -1"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/prepMultiAssay.html","id":null,"dir":"Reference","previous_headings":"","what":"Prepare a MultiAssayExperiment instance — prepMultiAssay","title":"Prepare a MultiAssayExperiment instance — prepMultiAssay","text":"purpose helper function faciltate creation MultiAssayExperiment object detecting inconsistencies types names either ExperimentList, colData, sampleMap.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/prepMultiAssay.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prepare a MultiAssayExperiment instance — prepMultiAssay","text":"","code":"prepMultiAssay(ExperimentList, colData, sampleMap, ...)"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/prepMultiAssay.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prepare a MultiAssayExperiment instance — prepMultiAssay","text":"ExperimentList list combined experiments colData DataFrame phenotype data participants sampleMap DataFrame sample identifiers, assay samples, assay names ... Optional arguments MultiAssayExperiment constructor function metadata drops.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/prepMultiAssay.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prepare a MultiAssayExperiment instance — prepMultiAssay","text":"list containing essential components MultiAssayExperiment well \"drops\" metadata element indicates non-matched names. names resulting list correspond arguments MultiAssayExperiment constructor function.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/prepMultiAssay.html","id":"checks","dir":"Reference","previous_headings":"","what":"Checks","title":"Prepare a MultiAssayExperiment instance — prepMultiAssay","text":"prepMultiAssay function checks columns sampleMap character. checks names lengths match ExperimentList unique assay names sampleMap. ExperimentList names assay names differ case duplicated, function standardize names lowercase. names matched colname column sampleMap colnames ExperimentList, unmatched dropped found \"drops\" element resulting list. Names \"primary\" column sampleMap, matched colData. Unmatched \"primary\" column rows dropped sampleMap. Suggestions name fixes either ExperimentList colnames made necessary.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/prepMultiAssay.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prepare a MultiAssayExperiment instance — prepMultiAssay","text":"","code":"## Run example example(\"MultiAssayExperiment\") #>  #> MltAsE> ## Run the example ExperimentList #> MltAsE> example(\"ExperimentList\") #>  #> ExprmL> ## Create an empty ExperimentList instance #> ExprmL> ExperimentList() #> ExperimentList class object of length 0: #>   #> ExprmL> ## Create array matrix and AnnotatedDataFrame to create an ExpressionSet class #> ExprmL> arraydat <- matrix(data = seq(101, length.out = 20), ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000294241\", \"ENST00000355076\", #> ExprmL+         \"ENST00000383706\",\"ENST00000234812\", \"ENST00000383323\"), #> ExprmL+         c(\"array1\", \"array2\", \"array3\", \"array4\") #> ExprmL+     )) #>  #> ExprmL> colDat <- data.frame(slope53 = rnorm(4), #> ExprmL+     row.names = c(\"array1\", \"array2\", \"array3\", \"array4\")) #>  #> ExprmL> ## SummarizedExperiment constructor #> ExprmL> exprdat <- SummarizedExperiment::SummarizedExperiment(arraydat, #> ExprmL+     colData = colDat) #>  #> ExprmL> ## Create a sample methylation dataset #> ExprmL> methyldat <- matrix(data = seq(1, length.out = 25), ncol = 5, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000355076\", \"ENST00000383706\", #> ExprmL+           \"ENST00000383323\", \"ENST00000234812\", \"ENST00000294241\"), #> ExprmL+         c(\"methyl1\", \"methyl2\", \"methyl3\", #> ExprmL+           \"methyl4\", \"methyl5\") #> ExprmL+     )) #>  #> ExprmL> ## Create a sample RNASeqGene dataset #> ExprmL> rnadat <- matrix( #> ExprmL+     data = sample(c(46851, 5, 19, 13, 2197, 507, #> ExprmL+         84318, 126, 17, 21, 23979, 614), size = 20, replace = TRUE), #> ExprmL+     ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"XIST\", \"RPS4Y1\", \"KDM5D\", \"ENST00000383323\", \"ENST00000234812\"), #> ExprmL+         c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\") #> ExprmL+     )) #>  #> ExprmL> ## Create a mock RangedSummarizedExperiment from a data.frame #> ExprmL> rangedat <- data.frame(chr=\"chr2\", start = 11:15, end = 12:16, #> ExprmL+     strand = c(\"+\", \"-\", \"+\", \"*\", \".\"), #> ExprmL+     samp0 = c(0,0,1,1,1), samp1 = c(1,0,1,0,1), samp2 = c(0,1,0,1,0), #> ExprmL+     row.names = c(paste0(\"ENST\", \"00000\", 135411:135414), \"ENST00000383323\")) #>  #> ExprmL> rangeSE <- SummarizedExperiment::makeSummarizedExperimentFromDataFrame(rangedat) #>  #> ExprmL> ## Combine to a named list and call the ExperimentList constructor function #> ExprmL> assayList <- list(Affy = exprdat, Methyl450k = methyldat, RNASeqGene = rnadat, #> ExprmL+                 GISTIC = rangeSE) #>  #> ExprmL> ## Use the ExperimentList constructor #> ExprmL> ExpList <- ExperimentList(assayList) #>  #> MltAsE> ## Create sample maps for each experiment #> MltAsE> exprmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"array1\", \"array2\", \"array3\", \"array4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> methylmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"methyl1\", \"methyl2\", \"methyl3\", \"methyl4\", \"methyl5\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> rnamap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\"), #> MltAsE+     colname = c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> gistmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Bob\", \"Jill\"), #> MltAsE+     colname = c(\"samp0\", \"samp1\", \"samp2\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> ## Combine as a named list and convert to a DataFrame #> MltAsE> maplist <- list(Affy = exprmap, Methyl450k = methylmap, #> MltAsE+     RNASeqGene = rnamap, GISTIC = gistmap) #>  #> MltAsE> ## Create a sampleMap #> MltAsE> sampMap <- listToMap(maplist) #>  #> MltAsE> ## Create an example phenotype data #> MltAsE> colDat <- data.frame(sex = c(\"M\", \"F\", \"M\", \"F\"), age = 38:41, #> MltAsE+     row.names = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\")) #>  #> MltAsE> ## Create a MultiAssayExperiment instance #> MltAsE> mae <- MultiAssayExperiment(experiments = ExpList, colData = colDat, #> MltAsE+     sampleMap = sampMap)  ## Check if there are any inconsistencies within the different names preparedMAE <- prepMultiAssay(ExpList, colDat, sampMap)  ## Results in a list of components for the MultiAssayExperiment constructor ## function MultiAssayExperiment(preparedMAE$experiments, preparedMAE$colData, preparedMAE$sampleMap) #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 5 rows and 4 columns #>  [2] Methyl450k: matrix with 5 rows and 5 columns #>  [3] RNASeqGene: matrix with 5 rows and 4 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 3 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## Alternatively, use the do.call function do.call(MultiAssayExperiment, preparedMAE) #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 5 rows and 4 columns #>  [2] Methyl450k: matrix with 5 rows and 5 columns #>  [3] RNASeqGene: matrix with 5 rows and 4 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 3 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Click function name see documentation. S4Vectors: DataFrame","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/reexports.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Objects exported from other packages — reexports","text":"","code":"DataFrame() #> DataFrame with 0 rows and 0 columns"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/subsetBy.html","id":null,"dir":"Reference","previous_headings":"","what":"Subsetting a MultiAssayExperiment object — subsetBy","title":"Subsetting a MultiAssayExperiment object — subsetBy","text":"set functions extracting dividing MultiAssayExperiment","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/subsetBy.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Subsetting a MultiAssayExperiment object — subsetBy","text":"","code":"subsetByRow(x, y, ...)  subsetByColData(x, y)  subsetByColumn(x, y)  subsetByAssay(x, y)  # S4 method for class 'ExperimentList,ANY' subsetByRow(x, y, ...)  # S4 method for class 'ExperimentList,list' subsetByRow(x, y)  # S4 method for class 'ExperimentList,List' subsetByRow(x, y)  # S4 method for class 'ExperimentList,logical' subsetByRow(x, y)  # S4 method for class 'ExperimentList,list' subsetByColumn(x, y)  # S4 method for class 'ExperimentList,List' subsetByColumn(x, y)  # S4 method for class 'ExperimentList,logical' subsetByColumn(x, y)  # S4 method for class 'ExperimentList' subsetByAssay(x, y)  # S4 method for class 'MultiAssayExperiment,ANY' subsetByColData(x, y)  # S4 method for class 'MultiAssayExperiment,character' subsetByColData(x, y)  # S4 method for class 'MultiAssayExperiment,ANY' subsetByRow(x, y, ...)  # S4 method for class 'MultiAssayExperiment,ANY' subsetByColumn(x, y)  # S4 method for class 'MultiAssayExperiment' subsetByAssay(x, y)  # S4 method for class 'MultiAssayExperiment,ANY,ANY,ANY' x[i, j, k, ..., drop = FALSE]  # S4 method for class 'MultiAssayExperiment,ANY,ANY' x[[i, j, ...]]  # S4 method for class 'MultiAssayExperiment,ANY,ANY' x[[i, j, ...]] <- value  # S4 method for class 'MultiAssayExperiment,ANY,ANY,ANY' x[i, j, ...] <- value"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/subsetBy.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Subsetting a MultiAssayExperiment object — subsetBy","text":"x MultiAssayExperiment ExperimentList y argument used subsetting, can character, logical, integer, list List vector ... Additional arguments passed lower level functions. Either character, integer, logical GRanges object subsetting rows j Either character, logical, numeric vector subsetting colData rows. See details information. k Either character, logical, numeric vector subsetting assays drop logical (default FALSE) whether drop empty assay elements ExperimentList value assay compatible MultiAssayExperiment API","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/subsetBy.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Subsetting a MultiAssayExperiment object — subsetBy","text":"subsetBy* operations endomorphic return either MultiAssayExperiment ExperimentList depending input.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/subsetBy.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Subsetting a MultiAssayExperiment object — subsetBy","text":"Subsetting MultiAssayExperiment j index can yield call either subsetByColData subsetByColumn. vector inputs, subset applied colData rows. List-type inputs, List applied elements ExperimentList. order subsetting elements List must match ExperimentList MultiAssayExperiment. subsetBycolData: Select biological units vector input types subsetByColumn: Select observations assay assay subsetByRow: Select rows assay assay subsetByAssay: Select experiments","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/subsetBy.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Subsetting a MultiAssayExperiment object — subsetBy","text":"","code":"## Load the example MultiAssayExperiment example(\"MultiAssayExperiment\") #>  #> MltAsE> ## Run the example ExperimentList #> MltAsE> example(\"ExperimentList\") #>  #> ExprmL> ## Create an empty ExperimentList instance #> ExprmL> ExperimentList() #> ExperimentList class object of length 0: #>   #> ExprmL> ## Create array matrix and AnnotatedDataFrame to create an ExpressionSet class #> ExprmL> arraydat <- matrix(data = seq(101, length.out = 20), ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000294241\", \"ENST00000355076\", #> ExprmL+         \"ENST00000383706\",\"ENST00000234812\", \"ENST00000383323\"), #> ExprmL+         c(\"array1\", \"array2\", \"array3\", \"array4\") #> ExprmL+     )) #>  #> ExprmL> colDat <- data.frame(slope53 = rnorm(4), #> ExprmL+     row.names = c(\"array1\", \"array2\", \"array3\", \"array4\")) #>  #> ExprmL> ## SummarizedExperiment constructor #> ExprmL> exprdat <- SummarizedExperiment::SummarizedExperiment(arraydat, #> ExprmL+     colData = colDat) #>  #> ExprmL> ## Create a sample methylation dataset #> ExprmL> methyldat <- matrix(data = seq(1, length.out = 25), ncol = 5, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"ENST00000355076\", \"ENST00000383706\", #> ExprmL+           \"ENST00000383323\", \"ENST00000234812\", \"ENST00000294241\"), #> ExprmL+         c(\"methyl1\", \"methyl2\", \"methyl3\", #> ExprmL+           \"methyl4\", \"methyl5\") #> ExprmL+     )) #>  #> ExprmL> ## Create a sample RNASeqGene dataset #> ExprmL> rnadat <- matrix( #> ExprmL+     data = sample(c(46851, 5, 19, 13, 2197, 507, #> ExprmL+         84318, 126, 17, 21, 23979, 614), size = 20, replace = TRUE), #> ExprmL+     ncol = 4, #> ExprmL+     dimnames = list( #> ExprmL+         c(\"XIST\", \"RPS4Y1\", \"KDM5D\", \"ENST00000383323\", \"ENST00000234812\"), #> ExprmL+         c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\") #> ExprmL+     )) #>  #> ExprmL> ## Create a mock RangedSummarizedExperiment from a data.frame #> ExprmL> rangedat <- data.frame(chr=\"chr2\", start = 11:15, end = 12:16, #> ExprmL+     strand = c(\"+\", \"-\", \"+\", \"*\", \".\"), #> ExprmL+     samp0 = c(0,0,1,1,1), samp1 = c(1,0,1,0,1), samp2 = c(0,1,0,1,0), #> ExprmL+     row.names = c(paste0(\"ENST\", \"00000\", 135411:135414), \"ENST00000383323\")) #>  #> ExprmL> rangeSE <- SummarizedExperiment::makeSummarizedExperimentFromDataFrame(rangedat) #>  #> ExprmL> ## Combine to a named list and call the ExperimentList constructor function #> ExprmL> assayList <- list(Affy = exprdat, Methyl450k = methyldat, RNASeqGene = rnadat, #> ExprmL+                 GISTIC = rangeSE) #>  #> ExprmL> ## Use the ExperimentList constructor #> ExprmL> ExpList <- ExperimentList(assayList) #>  #> MltAsE> ## Create sample maps for each experiment #> MltAsE> exprmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"array1\", \"array2\", \"array3\", \"array4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> methylmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jack\", \"Jill\", \"Barbara\", \"Bob\"), #> MltAsE+     colname = c(\"methyl1\", \"methyl2\", \"methyl3\", \"methyl4\", \"methyl5\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> rnamap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\"), #> MltAsE+     colname = c(\"samparray1\", \"samparray2\", \"samparray3\", \"samparray4\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> gistmap <- data.frame( #> MltAsE+     primary = c(\"Jack\", \"Bob\", \"Jill\"), #> MltAsE+     colname = c(\"samp0\", \"samp1\", \"samp2\"), #> MltAsE+     stringsAsFactors = FALSE) #>  #> MltAsE> ## Combine as a named list and convert to a DataFrame #> MltAsE> maplist <- list(Affy = exprmap, Methyl450k = methylmap, #> MltAsE+     RNASeqGene = rnamap, GISTIC = gistmap) #>  #> MltAsE> ## Create a sampleMap #> MltAsE> sampMap <- listToMap(maplist) #>  #> MltAsE> ## Create an example phenotype data #> MltAsE> colDat <- data.frame(sex = c(\"M\", \"F\", \"M\", \"F\"), age = 38:41, #> MltAsE+     row.names = c(\"Jack\", \"Jill\", \"Bob\", \"Barbara\")) #>  #> MltAsE> ## Create a MultiAssayExperiment instance #> MltAsE> mae <- MultiAssayExperiment(experiments = ExpList, colData = colDat, #> MltAsE+     sampleMap = sampMap)  ## Using experiment names subsetByAssay(mae, \"Affy\") #> Warning: 'experiments' dropped; see 'drops()' #> harmonizing input: #>   removing 12 sampleMap rows not in names(experiments) #> A MultiAssayExperiment object of 1 listed #>  experiment with a user-defined name and respective class. #>  Containing an ExperimentList class object of length 1: #>  [1] Affy: SummarizedExperiment with 5 rows and 4 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## Using numeric indices subsetByAssay(mae, 1:2) #> Warning: 'experiments' dropped; see 'drops()' #> harmonizing input: #>   removing 7 sampleMap rows not in names(experiments) #> A MultiAssayExperiment object of 2 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 2: #>  [1] Affy: SummarizedExperiment with 5 rows and 4 columns #>  [2] Methyl450k: matrix with 5 rows and 5 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## Using a logical vector subsetByAssay(mae, c(TRUE, FALSE, TRUE)) #> Warning: 'experiments' dropped; see 'drops()' #> harmonizing input: #>   removing 5 sampleMap rows not in names(experiments) #> A MultiAssayExperiment object of 3 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 3: #>  [1] Affy: SummarizedExperiment with 5 rows and 4 columns #>  [2] RNASeqGene: matrix with 5 rows and 4 columns #>  [3] GISTIC: RangedSummarizedExperiment with 5 rows and 3 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## Subset by character vector (Jack) subsetByColData(mae, \"Jack\") #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 5 rows and 1 columns #>  [2] Methyl450k: matrix with 5 rows and 2 columns #>  [3] RNASeqGene: matrix with 5 rows and 1 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 1 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## Subset by numeric index of colData rows (Jack and Bob) subsetByColData(mae, c(1, 3)) #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 5 rows and 2 columns #>  [2] Methyl450k: matrix with 5 rows and 3 columns #>  [3] RNASeqGene: matrix with 5 rows and 2 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 2 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## Subset by logical indicator of colData rows (Jack and Jill) subsetByColData(mae, c(TRUE, TRUE, FALSE, FALSE)) #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 5 rows and 2 columns #>  [2] Methyl450k: matrix with 5 rows and 3 columns #>  [3] RNASeqGene: matrix with 5 rows and 2 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 2 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  subsetByColumn(mae, list(Affy = 1:2,     Methyl450k = c(3,5,2), RNASeqGene = 2:4, GISTIC = 1)) #> harmonizing input: #>   removing 7 sampleMap rows with 'colname' not in colnames of experiments #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 5 rows and 2 columns #>  [2] Methyl450k: matrix with 5 rows and 3 columns #>  [3] RNASeqGene: matrix with 5 rows and 3 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 1 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  subsetWith <- S4Vectors::mendoapply(`[`, colnames(mae),     MoreArgs = list(1:2)) subsetByColumn(mae, subsetWith) #> harmonizing input: #>   removing 8 sampleMap rows with 'colname' not in colnames of experiments #>   removing 1 colData rownames not in sampleMap 'primary' #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 5 rows and 2 columns #>  [2] Methyl450k: matrix with 5 rows and 2 columns #>  [3] RNASeqGene: matrix with 5 rows and 2 columns #>  [4] GISTIC: RangedSummarizedExperiment with 5 rows and 2 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## Use a GRanges object to subset rows where ranged data present egr <- GenomicRanges::GRanges(seqnames = \"chr2\",     IRanges::IRanges(start = 11, end = 13), strand = \"-\") subsetByRow(mae, egr) #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 0 rows and 4 columns #>  [2] Methyl450k: matrix with 0 rows and 5 columns #>  [3] RNASeqGene: matrix with 0 rows and 4 columns #>  [4] GISTIC: RangedSummarizedExperiment with 1 rows and 3 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## Use a logical vector (recycling used) subsetByRow(mae, c(TRUE, FALSE)) #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 3 rows and 4 columns #>  [2] Methyl450k: matrix with 3 rows and 5 columns #>  [3] RNASeqGene: matrix with 3 rows and 4 columns #>  [4] GISTIC: RangedSummarizedExperiment with 3 rows and 3 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files  ## Use a character vector subsetByRow(mae, \"ENST00000355076\") #> A MultiAssayExperiment object of 4 listed #>  experiments with user-defined names and respective classes. #>  Containing an ExperimentList class object of length 4: #>  [1] Affy: SummarizedExperiment with 1 rows and 4 columns #>  [2] Methyl450k: matrix with 1 rows and 5 columns #>  [3] RNASeqGene: matrix with 0 rows and 4 columns #>  [4] GISTIC: RangedSummarizedExperiment with 0 rows and 3 columns #> Functionality: #>  experiments() - obtain the ExperimentList instance #>  colData() - the primary/phenotype DataFrame #>  sampleMap() - the sample coordination DataFrame #>  `$`, `[`, `[[` - extract colData columns, subset, or experiment #>  *Format() - convert into a long or wide DataFrame #>  assays() - convert ExperimentList to a SimpleList of matrices #>  exportClass() - save data to flat files"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/upsetSamples.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a generalized Venn Diagram analog for sample membership in multiple assays, using the upset algorithm in UpSetR — upsetSamples","title":"Create a generalized Venn Diagram analog for sample membership in multiple assays, using the upset algorithm in UpSetR — upsetSamples","text":"Create generalized Venn Diagram analog sample membership multiple assays, using upset algorithm UpSetR","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/upsetSamples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a generalized Venn Diagram analog for sample membership in multiple assays, using the upset algorithm in UpSetR — upsetSamples","text":"","code":"upsetSamples(   MultiAssayExperiment,   nsets = NULL,   sets = names(MultiAssayExperiment),   nintersects = NA_integer_,   order.by = \"freq\",   check.names = FALSE,   ... )"},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/upsetSamples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a generalized Venn Diagram analog for sample membership in multiple assays, using the upset algorithm in UpSetR — upsetSamples","text":"MultiAssayExperiment MultiAssayExperiment object nsets numeric(1) number sets analyze. specified, sets ignored. sets character() character vector names MultiAssayExperiment use. specified, nsets ignored. nintersects numeric(1) number intersections plot. default, intersections plotted. order.intersections matrix ordered . Options include frequency (entered \"freq\"), degree, order. check.names logical(1) Whether munge names data.frame() constructor (default FALSE). ... parameters passed UpSetR::upset","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/upsetSamples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a generalized Venn Diagram analog for sample membership in multiple assays, using the upset algorithm in UpSetR — upsetSamples","text":"Produces visualization set intersections using UpSet matrix design","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/upsetSamples.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create a generalized Venn Diagram analog for sample membership in multiple assays, using the upset algorithm in UpSetR — upsetSamples","text":"function intended provide convenient visualization assay availability configurations MultiAssayExperiment instances. UpSetR::upset function requires data.frame input many parameters tune appearance result. Assay name handling important interpretability.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/upsetSamples.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Create a generalized Venn Diagram analog for sample membership in multiple assays, using the upset algorithm in UpSetR — upsetSamples","text":"Vincent J Carey","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/reference/upsetSamples.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a generalized Venn Diagram analog for sample membership in multiple assays, using the upset algorithm in UpSetR — upsetSamples","text":"","code":"data(miniACC) upsetSamples(miniACC)  upsetSamples(miniACC, nsets = 3, nintersects = 3)"},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-30-3","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.30.3","text":"colData<- replacement method now correctly works data.frame value inputs (@drighelli, #330). Updated CITATION information main vignette. Use reshape2::melt instead stats::reshape preserve row names longFormat rownames numeric characters e.g., “1”, ensure stay character converting MultiAssayExperiment longFormat.","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-28-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.28.0","text":"Dropped experiments longer kept metadata slot. can seen drops() (@LTLA, #323).","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-28-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.28.0","text":"Checking colnames sampleMap vs ExperimentList robust comparing unique sorted values .","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-26-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.26.0","text":"showReplicated displays actual colnames technical replicates assay biological unit. bracket replacement method [<- MultiAssayExperiment now also replaces names right-hand side operation, (@DarioS, #319)","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-26-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.26.0","text":"single assay replacement [[<-, re-ordering assays based value input invalid empty assays present (@danielinteractive, #322). Permuting assays also updates order names MultiAssayExperiment assays sampleMap","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-24-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.24.0","text":"replicates provides actual colnames identified replicate observations particular biological unit sampleMap","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-24-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.24.0","text":"Added assay<- replacement method robustifying saveHDF5MultiAssayExperiment plain matrices Use BiocBaseUtils::setSlots avoid warnings triple colon use. Resolve issue colData one column merging two MultiAssayExperiment objects, .e., using c method (@cvanderaa, #315) Increase efficiency colnames rownames methods (@cvanderaa, #314) Make ‘prefix’ inputs consistent saveHDF5MultiAssayExperiment loadHDF5MultiAssayExperiment (@asiyeka, #313) Improve performance replicated method Update wideFormat documentation, replicates present additional sets columns appended produced DataFrame (@DarioS, #312)","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-22-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.22.0","text":"Add data(\"miniACC\") examples removing lazy loading. Class definition prototypes defined cleaner extensibility (@hpages, #306). Doc internal improvments MultiAssayExperimentToMAF synAssay nonSynAssay now require exact assay names MultiAssayExperimentToMAF","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-20-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.20.0","text":"Avoid dropping experiments repeated calls subsetByColData remove harmonization (@cvanderaa, #302) getWithColData suppresses messages natural subsetting operations default verbose = FALSE (@bhagwataditya, #301) getWithColData using old default (drop = TRUE) causing error experiment empty (@danielinteractive, #300). Calls internal .harmonize operation reduced increase memory efficiency, identical experiment colnames present (@LTLA, #299). subsetByColData now errors subscript vectors longer nrow colData (previously warning). colData<- includes check identical row names. , direct replacement colData occurs without harmonization. Added warning empty sampleMap provided constructor function may cause unexpected behavior. Documentation updated include details sampleMap input.","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-18-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.18.0","text":"saveHDF5MultiAssayExperiment allows users save data classes (excluding RaggedExperiment) single H5 file (ctb @hpages) Support maftools conversion added MultiAssayExperimentToMAF (ctb @PoisonAlien) renameColname renamePrimary provide renaming facilities column names experiments rownames colData, respectively Users can now rename column names experiments using colnames(mae) <- value replacing colData experiments (including [[<-), new rownames colnames (respectively) checked existing values error given none match Using List objects replace data ExperimentList now supported splitAssay allows users separate / split columns across assays makeHitList facilitator function create logical lists required input splitAssay drop argument subsetting MultiAssayExperiment now FALSE default","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-18-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.18.0","text":"Updated constructor function auto-populate rownames colData missing (@LTLA, #287) metadata now includes names dropped experiments Updated validity checks support array-like classes Dropped experiments tracked metadata","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-16-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.16.0","text":"Coercion methods list/List MultiAssayExperiment method now available.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-16-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.16.0","text":"Provide details documentation mergeReplicates Improved documentation accessor function return values, helper function examples (@llrs, #281) Fixed bug using longFormat character assay matrices (@jonocarroll, #282)","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-14-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.14.0","text":"exportClass creates number .csv data files exporting data Allow vector input selecting assays longFormat (@lgatto, #266) Updates ‘Using MultiAssayExperiment DelayedMatrix’ vignette","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-14-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.14.0","text":"Warn colData rownames ExperimentList colnames empty (@LTLA #262) Add informative error message ExperimentList (@lgatto, #265) Informative warning dropping ExperimentList element columns (@lwaldron) Fixes constructor functions, MultiAssayExperiment MatchedAssayExperiment (@lgatto, #267 #268, @lwaldron) Add warning j mae[, j, k] longer colData rows Strict argument matching generic methods Updates due class(matrix()) UpsetSamples robust differences names split sampleMap names(ExperimentList) (@jonocarroll, #269) Refactored improved UpsetSamples ExperimentList propagation mcols metadata (@vobencha, #270) Enforcement validObject replacement methods colData sampleMap (@vobencha, #271)","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-12-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.12.0","text":"Improvements main vignette, MultiAssayExperiment class schematic now included (@mtmorgan, #261) Updated documentation upsetSamples function Update code use splitAsList S4Vectors (@hpages) Fixed bug metadata disappearing ExperimentList replacing inside MultiAssayExperiment object (@lawremi, #259) Fixed formatting NEWS file","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-10-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.10.0","text":"getWithColData now allows easy extraction experiments (SummarizedExperiment) associated colData data Single bracket replace method implemented MultiAssayExperiment assays","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-10-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.10.0","text":"isEmpty method fixed ExperimentLists containing matrices MultiAssayExperiment now inherits standard Annotated virtual class c method better distinguishes list ExperimentList inputs Improvements .getHits internal method obtaining correct queries row metadata Subsetting mechanism tweaked nothing subsetting NULL rows compared empty rows (.e., character(0L)) Improved README.md","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-8-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.8.0","text":"single bracket replacement method [<- added support assignment assay datasets Users can now rename experiments MultiAssayExperiment names(x) <- value replicated mergeReplicates functions refactored improved combining MultiAssayExperiments now possible c function Subsetting MultiAssayExperiment list List type class now returns experiments input order rows, columns, assays","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.8.0","text":"wideFormat function improvements bug fixes name indicator subsetting BiocGenerics:::replaceSlots used instead replace methods Added tests anyReplicated, c, names<- functions Unit tests added replacement method testing Renamed objects examples brevity descriptiveness Updated importFrom directives Internal sample names check now works non-empty colnames Various documentation improvements listToMap re-written efficiency Various improvements subsetting mechanism subsetByAssay bug fixed using integer index (@vjcitn, #)","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.6.0","text":"DataFrame now exported users (@DarioS, #242) c smarter matching colnames primary names creating sampleMap MatchedAssayExperiment constructor function now works either single MultiAssayExperiment essential components one. Renamed duplicated function replicated Added coercion functions List list ExperimentList Improve speed reshape functions previous change (wideFormat) Remove clusterOn function move Bioconductor/MultiOmicQC package GitHub duplicated deprecated, use replicated anyReplicated removed dependencies tidyr reshape2 Moved API shiny function waldronlab/MultiAssayShiny package Reduced imports (removed shinydashboard shiny) Method requirement checks classes practical using try() Deprecated methods removed: pData Deprecated class removed: RangedRaggedAssay Assay-selective subsetting implemented via list/List class subsettors","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.6.0","text":"Added isEmpty method ExperimentList account empty matrix Documentation improvements MultiAssayExperiment-class MultiAssayExperiment-helpers c internals improved Explicitly check DataFrame ExperimentList Fixed documentation warnings inexact links Fix subsetting order bracket method ([) Minor vignette changes Supply collapse character wideFormat column names upsetSamples munge experiment names special characters check.names = FALSE (default keeps hyphens, underscores, etc.). nameFilter functional argument allows operations substr experiment names. (@vjcitn, #231) Updates prepMultiAssay Enhancements main vignette New format NEWS section updated duplicated function now returns FALSE non-duplicated samples Improved ExperimentList constructor now handles multiple key = value entries Removed updateObject giving warning Removed old RTCGAToolbox example vignette Official manuscript citation added Improved examples (removed ExpressionSet legacy objects)","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-59","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.59","text":"rearrange now broken longFormat wideFormat functions. Helper functions now dedicated man page, see: ?'MultiAssayExperiment-helpers'","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-59","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.59","text":"subset can affect order rows (previously didn’t) rownames exclusively used create longFormat DataFrames longFormat,ExperimentList-method now returns long DataFrame Minor improvements tests","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-52","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.52","text":"reduce removed broken mergeReplicates intersectColumns Additional helper introduced: intersectRows","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-49","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.49","text":"pData deprecated favor colData Quick start vignette now available","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-49","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.49","text":"Fixed API function link Removed coercion old RangedRaggedAssay class Improved listToMap","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-44","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.44","text":"Renamed PrepMultiAssay prepMultiAssay (lower p following convention)","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-43","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.43","text":"MultiAssayExperiment quickstart guide vignette added Deprecation RangedRaggedAssay class. Use RaggedExperiment package instead. reduce function simplified mapFrom convenience argument added c,MultiAssayExperiment-method assay assays methods revised conform SummarizedExperiment standards","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-43","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.43","text":"API() now points correct web document ExperimentList constructor longer coerces GRangesList RangedRaggedAssay Documentation changes: consolidate man pages experiments, experiments<-, sampleMap, sampleMap<- removal internal getHits method, simplified helper function place prepMultiAssay helper now returns list names corresponding MultiAssayExperiment constructor function","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-37","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.37","text":"MatchedAssayExperiment subclass added matched samples assays Supply mini ACC dataset data(miniACC) Provide reference table methods package, see vignettes Merge GitHub development version","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-37","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.37","text":"ensure assay column sampleMap factor rearrange long DataFrame correctly remove support RangedRaggedAssay - deprecate drop = FALSE single column subset colData default sampleMap representation empty DataFrame colnames added combine c vignette section adding experiments existing","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-27","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.27","text":"c method implemented experiments 1:1 sample matches pData rows MultiAssayExperiment show method improved Double bracket [[ extracts single experiment (replacement also included) Internal getHits methods removed refactored subsetByRows subsetBypData available rearrange method now supports “wide” format outputs","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-27","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.27","text":"Updates HDF5 vignette examples documentation Numerous bug fixes mapToList uses efficient splitAsList function","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-17","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.17","text":"upsetSamples function implemented","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-16","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.16","text":"Implement shape argument rearrange function: wide now available","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-16","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.16","text":"Updated vignettes: DelayedMatrix & PRAD MultiAssayExperiment object","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-15","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.15","text":"disjoin method RangedRaggedAssay","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-15","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.15","text":"show method RangedRaggedAssay abbreviated. longer summarizes data assay Documentation changes reduce disjoin","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-12","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.12","text":"gather/collect function name changed rearrange clusterSex now clusterOn, works characteristic choice","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-11","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.11","text":"Renamed gather function collect","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-10","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.10","text":"Double bracket method MultiAssayExperiment available","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-9","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.9","text":"clusterSex function available clustering gender expression data","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-9","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.9","text":"Improvements documentation","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-6","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.6","text":"Added example HNSC dataset","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-6","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.6","text":"Improve documentation assay method RangedRaggedAssay Bug fixes assay method Removed method pollution Bioconductor classes assay method shows numeric character data","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-2","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.2","text":"extract method renamed gather gather allows inclusion pData columns gather method supports common classes; creates “tidy” DataFrame pData rownames, ExperimentList rownames, ExperimentList columns, assay names, optional pData columns","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.2","text":"Fix assay arguments RangedRaggedAssay method Subsetting column now arranges sampleMap proper order","code":""},{"path":[]},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"new-features-1-1-1","dir":"Changelog","previous_headings":"","what":"New features","title":"Changes in version 1.1.1","text":"extract method now available common classes - creates tidy data.frame data Example section added vignette converting data frames Bioconductor objects dimnames method added RangedRaggedAssay $ (DollarSign) method available MultiAssayExperiment access pData column metadata<- set method now available MultiAssayExperiment Improved MultiAssayExperiment constructor renamed argument “experiments” ExperimentList list input. updateObject method now available old instances MultiAssayExperiment Users invalid MultiAssayExperiments update re-serialize complete.cases method available MultiAssayExperiment class sampleMap column names renamed assay (prev. “assayname”), primary, colname (prev. “assay”) New vignete available creating MultiAssayExperiment objects TCGA data Elist class renamed ExperimentList ExperimentList constructor homonymous ExperimentList accessor now called experiments ExperimentList replacement method now experiments<- Updated vignettes reflect change names assay method RangedRaggedAssay works inner metadata columns now vignette examples available HDF5Array package Improved outline main vignette assay method available RangedRaggedAssay classes. Created obtain raw data certain classes (see ?assay,(class),-method). Subsetting non-character (#108) PrepMultiAssay helper function now available aid creating object (#122) Vignette now building (#125) Preliminary assay method RangedRaggedAssay Replacement method colnames now available RangedRaggedAssay class.","code":""},{"path":"https://github.com/waldronlab/MultiAssayExperiment/news/index.html","id":"bug-fixes-and-minor-improvements-1-1-1","dir":"Changelog","previous_headings":"","what":"Bug fixes and minor improvements","title":"Changes in version 1.1.1","text":"Documentation updated new roxygen version Improved RangedRaggedAssay rowname construction Improved show method RangedRaggedAssay class Improved MultiAssayExperiment constructor now handles stray assays, colnames, pData rownames, sampleMap rows metadata argument available MultiAssayExperiment constructor function Fix bug subsetting unmatched samples/colnames (drop = FALSE) constructor drop argument now works intended using List inherited objects proper dimnames method added MultiAssayExperiment Added informative error MultiAssayExperiment constructor Improved show method display Removed warning message ExperimentList argument provided Superfluous subset function removed sampleMap uses character vectors instead Rle Elist order consistent subsetting mapToList preserves list order","code":""}]
